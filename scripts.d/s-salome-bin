
function s-salome-bin-depends()
{
    echo s-salome-tar
}

####################################################### WINDOWS

function s-salome-bin-ngwin-env()
{
    local IROOT=$(cygpath -m $SALOME_BIN_MODULES)
    local IEXT=$IROOT/EXT

    [[ -d $IROOT/cmake/bin ]] &&
        add-to-var PATH $IROOT/cmake/bin

    add-to-var INCLUDE               $IEXT/include

    set-var    HDF5_ROOT             $IEXT
    add-to-var HDF5_INCLUDE_DIRS     $IEXT/include
    add-to-var HDF5_LIBRARIES        $IEXT/lib/libhdf5.lib
    add-to-var HDF5_HL_LIBRARIES     $IEXT/lib/libhdf5_hl.lib

    add-to-var LIBXML2_INCLUDE_DIR   $IEXT/include
    add-to-var LIBXML2_LIBRARY       $IEXT/lib/libxml2.lib

    add-to-var PATH                  $IROOT/Python
    add-to-var Python3_INCLUDE_DIRS  $IROOT/Python/include
    add-to-var Python3_EXECUTABLE    $IROOT/Python/python3.exe
    add-to-var Python3_LIBRARIES     $IROOT/Python/python3.lib
    set-var    PYTHON_VERSION        3.6
    set-var    PYTHON_INCLUDE        $IROOT/Python/include
    set-var    PYTHON_SITE_PACKAGES  $IROOT/Python/lib/site-packages
    set-var    PYTHON_LIBDIR         lib/python$PYTHON_VERSION/site-packages

    set-var    FREETYPE_LIBRARY      $IEXT/lib/freetype.lib

    set-var    ZLIB_LIBRARY          $IEXT/bin/zlib.lib

    set-var    CGNS_LIBRARY          $IEXT/lib/cgns.lib

    set-var    TBB_ROOT              $IEXT
    set-var    TBB_INCLUDE_DIRS      $IEXT/include

    set-var    KERNEL_ROOT_DIR       $IROOT/KERNEL
    set-var    GUI_ROOT_DIR          $IROOT/GUI
    set-var    PARAVIEW_ROOT_DIR     $IROOT/ParaView
    set-var    EMBREE_ROOT_DIR       $IROOT/embree
    set-var    RKCOMMON_ROOT_DIR     $IROOT/rkcommon
    set-var    OPENVKL_ROOT_DIR      $IROOT/openVKL
    set-var    QT5_ROOT_DIR          $IROOT/qt
    set-var    PYTHON_ROOT_DIR       $IROOT/Python
    set-var    BOOST_ROOT_DIR        $IEXT
    set-var    OSPRAY_ROOT_DIR       $IEXT
    set-var    CPPUNIT_ROOT_DIR      $IEXT

    add-to-var PATH               $(cygpath -m $QT5_ROOT_DIR/bin)

    add-to-var CMAKE_PREFIX_PATH  $IROOT/cmake/share/cmake-3.12/Modules
    add-to-var CMAKE_PREFIX_PATH  $IEXT
    add-to-var CMAKE_PREFIX_PATH  $IEXT/cmake
    add-to-var CMAKE_PREFIX_PATH  $KERNEL_ROOT_DIR/salome_adm/cmake_files
    add-to-var CMAKE_PREFIX_PATH  $GUI_ROOT_DIR/adm_local/cmake_files
    add-to-var CMAKE_PREFIX_PATH  $BOOST_ROOT_DIR/lib/cmake/tbb
    add-to-var CMAKE_PREFIX_PATH  $PARAVIEW_ROOT_DIR/lib/cmake/paraview-5.9
    add-to-var CMAKE_PREFIX_PATH  $PARAVIEW_ROOT_DIR/lib/cmake/paraview-5.9/vtk
    add-to-var CMAKE_PREFIX_PATH  $OSPRAY_ROOT_DIR/lib/cmake/ospray-2.4.0
    add-to-var CMAKE_PREFIX_PATH  $EMBREE_ROOT_DIR/lib/cmake/embree-3.12.2
    add-to-var CMAKE_PREFIX_PATH  $RKCOMMON_ROOT_DIR/lib/cmake/rkcommon-1.5.1
    add-to-var CMAKE_PREFIX_PATH  $OPENVKL_ROOT_DIR/lib/cmake/openvkl-0.11.0
    add-to-var CMAKE_PREFIX_PATH  $QT5_ROOT_DIR/lib/cmake/Qt5
    add-to-var CMAKE_PREFIX_PATH  $QT5_ROOT_DIR/lib/cmake/Qt5Test
    add-to-var CMAKE_PREFIX_PATH  $QT5_ROOT_DIR/lib/cmake/Qt5UiTools
    add-to-var CMAKE_PREFIX_PATH  $QT5_ROOT_DIR/lib/cmake/Qt5OpenGL
    add-to-var CMAKE_PREFIX_PATH  $QT5_ROOT_DIR/lib/cmake/Qt5Xml
    add-to-var CMAKE_PREFIX_PATH  $QT5_ROOT_DIR/lib/cmake/Qt5DataVisualization
}

####################################################### LINUX

#  Returns 0 if VAR has ROOT as prefix
function is-root-path()
{
    local ROOT=$1
    local VAR=$2

    [[ ! -z $VAR ]] && [[ ${VAR#$ROOT} != $VAR ]]
}

function s-salome-bin-ng-env()
{
    copy-function define-var define-var-orig

    #  Redefine define-var to filter out modules that are otherwise
    #  rebuilt on top of the binary archive.

    function define-var()
    {
        local ACTION=$1
        local VAR=$2
        local VALUE=$3

        local FOUND=false

        for MOD in ${SCBI_EXTRA_NG_MODULES//:/ }; do
            local DEF=( $(get-extra-module-def $MOD) )
            local PAT=${DEF[1]}

            if [[ ! -z $PAT ]]; then
                if [[ $VALUE =~ $PAT ]] || [[ $VAR =~ $PAT ]]; then
                    FOUND=true
                    break
                fi
            fi
        done

        if [[ $FOUND == false ]]; then
            define-var-orig $ACTION $VAR $VALUE
        fi
    }

    #  This section is to set in the PATH a proper version of
    #  CMake. It is either the one actually in the PATH or provided in
    #  the binary archive.  Note that we ensure we will never be using
    #  a version older than the one provided in the binary archive,
    #  but we may have one more recent for building softwares in
    #  clusters for example.

    #  Local CMAKE version
    local LOCCMAKE=
    #  BIN CMAKE version
    local BINCMAKE=

    local SCBI_CMAKE_PATH=$(which cmake)

    if [[ -z $SCBI_CMAKE_PATH ]]; then
	#  No system or user's env CMake found
	LOCCMAKE=0
    else
	#  We have a CMake in the PATH, get its version
	LOCCMAKE=( $($SCBI_CMAKE_PATH --version) )
	LOCCMAKE=${LOCCMAKE[2]}
        SCBI_CMAKE_PATH=$(dirname $SCBI_CMAKE_PATH)
    fi

    if [[ -d $SALOME_BIN_MODULES/cmake/bin ]]; then
	#  We have a CMake in binary archive, get its version
	BINCMAKE=( $($SALOME_BIN_MODULES/cmake/bin/cmake --version) )
	BINCMAKE=${BINCMAKE[2]}

	#  Use this version of CMake only if it is greater than the one
	#  provided in the binary archive.

	check-versions $BINCMAKE ">" $LOCCMAKE

	[[ $? == 0 ]] &&
            SCBI_CMAKE_PATH=$SALOME_BIN_MODULES/cmake/bin
    fi

    . ${SALOME_BIN_APPLICATION}/scbi_env.sh

    #  Sentinel variable used as separator between the binary env coming
    #  from scbi_env.sh above and the explicit setting below. This is needed
    #  by s-salome-ng to generate the final environment for the application.

    set-var SCBI_SALOME_BIN_ENV_SECTION yes

    #  Set CMake if necessary to possibly overwrite the one from binary archive

    [[ -n $SCBI_CMAKE_PATH ]] &&
        prepend-to-var PATH $SCBI_CMAKE_PATH

    #  Some missing settings in scbi_env.sh

    if [[ -d $SALOME_BIN_MODULES/libxml2/bin ]]; then
        local LXDIR=$SALOME_BIN_MODULES/libxml2

        add-to-var PATH               $LXDIR/bin
        add-to-var C_INCLUDE_PATH     $LXDIR/include/libxml2
        add-to-var CPLUS_INCLUDE_PATH $LXDIR/include/libxml2
        add-to-var LIBRARY_PATH       $LXDIR/lib
    fi

    add-to-var CMAKE_PREFIX_PATH  $BOOST_ROOT_DIR/lib/cmake
    add-to-var CMAKE_PREFIX_PATH  $GEOM_ROOT_DIR/adm_local/cmake_files
    add-to-var CMAKE_PREFIX_PATH  $GUI_ROOT_DIR/adm_local/cmake_files
    add-to-var CMAKE_PREFIX_PATH  $KERNEL_ROOT_DIR/salome_adm/cmake_files
    add-to-var CMAKE_PREFIX_PATH  $LIBBATCH_ROOT_DIR/share/cmake/libbatch
    add-to-var CMAKE_PREFIX_PATH  $MEDCOUPLING_ROOT_DIR/cmake_files
    add-to-var CMAKE_PREFIX_PATH  $OPENCV_ROOT_DIR/share/OpenCV
    add-to-var CMAKE_PREFIX_PATH  $OPENTURNS_ROOT_DIR/lib/cmake/openturns
    add-to-var CMAKE_PREFIX_PATH  $OPENTURNS_ROOT_DIR/lib/cmake/otmoris
    add-to-var CMAKE_PREFIX_PATH  $PY2CPP_ROOT_DIR/lib/cmake/py2cpp
    add-to-var CMAKE_PREFIX_PATH  $QT5_ROOT_DIR/lib/$SCBI_TARGET/cmake
    add-to-var CMAKE_PREFIX_PATH  $QWT_ROOT_DIR
    add-to-var CMAKE_PREFIX_PATH  $YACS_ROOT_DIR/adm/cmake
    add-to-var CMAKE_PREFIX_PATH  $YDEFX_ROOT_DIR/salome_adm/cmake_files
    add-to-var CMAKE_PREFIX_PATH  $ZEROMQ_ROOT_DIR/share/cmake/ZeroMQ
    add-to-var CMAKE_PREFIX_PATH  $EIGEN_ROOT_DIR/share/eigen3/cmake
    add-to-var CMAKE_PREFIX_PATH  $CAS_ROOT_DIR/lib/cmake/opencascade

    add-to-var CMAKE_PREFIX_PATH  \
               $(last-modified-directory $EMBREE_ROOT_DIR/lib/cmake/embree-*)
    add-to-var CMAKE_PREFIX_PATH  \
               $(last-modified-directory $OSPRAY_ROOT_DIR/lib/cmake/ospray-*)
    add-to-var CMAKE_PREFIX_PATH  \
               $(last-modified-directory \
                     $PARAVIEW_ROOT_DIR/lib/cmake/paraview-*)
    add-to-var CMAKE_PREFIX_PATH  \
               $(last-modified-directory \
                     $PARAVIEW_ROOT_DIR/lib/cmake/paraview-*/vtk)

    is-root-path $SALOME_BIN_MODULES $QT5_ROOT_DIR &&
        {
            add-to-var CMAKE_PREFIX_PATH  $QT5_ROOT_DIR/lib/cmake
        }

    is-root-path $SALOME_BIN_MODULES $PY2CPP_ROOT_DIR &&
        {
            add-to-var C_INCLUDE_PATH     $PY2CPP_ROOT_DIR/include
            add-to-var CPLUS_INCLUDE_PATH $PY2CPP_ROOT_DIR/include
        }

    is-root-path $SALOME_BIN_MODULES $MPI_ROOT_DIR &&
        {
            add-to-var C_INCLUDE_PATH     $MPI_ROOT_DIR/include
            add-to-var CPLUS_INCLUDE_PATH $MPI_ROOT_DIR/include
        }

    is-root-path $SALOME_BIN_MODULES $OMNIORB_ROOT_DIR &&
        {
            add-to-var C_INCLUDE_PATH     $OMNIORB_ROOT_DIR/include
            add-to-var CPLUS_INCLUDE_PATH $OMNIORB_ROOT_DIR/include
        }

    is-root-path $SALOME_BIN_MODULES $MEDFILE_ROOT_DIR &&
        {
            add-to-var C_INCLUDE_PATH     $MEDFILE_ROOT_DIR/include
            add-to-var CPLUS_INCLUDE_PATH $MEDFILE_ROOT_DIR/include
        }

    is-root-path $SALOME_BIN_MODULES $PTSCOTCH_ROOT_DIR &&
        {
            add-to-var C_INCLUDE_PATH         $PTSCOTCH_ROOT_DIR/include
            add-to-var CPLUS_INCLUDE_PATH     $PTSCOTCH_ROOT_DIR/include
            add-to-var PATH                   $PTSCOTCH_ROOT_DIR/bin
            add-to-var LIBRARY_PATH           $PTSCOTCH_ROOT_DIR/lib
            set-var    PTSCOTCH_INCLUDE_DIRS  $PTSCOTCH_ROOT_DIR/include
            set-var    PTSCOTCH_LIBRARIES     \
                       $PTSCOTCH_ROOT_DIR/lib/libptscotch.a
            set-var    PTSCOTCH_ERR_LIBRARIES \
                       $PTSCOTCH_ROOT_DIR/lib/libptscotcherr.a
        }

    add-to-var PATH                   $ISPC_ROOT_DIR/bin
    add-to-var PATH                   $SALOME_BIN_MODULES/llvm/bin

    is-root-path $SALOME_BIN_MODULES $GDAL_ROOT_DIR &&
        {
            add-to-var PATH                   $GDAL_ROOT_DIR/bin
            add-to-var C_INCLUDE_PATH         $GDAL_ROOT_DIR/include
            add-to-var CPLUS_INCLUDE_PATH     $GDAL_ROOT_DIR/include
            add-to-var LIBRARY_PATH           $GDAL_ROOT_DIR/lib
            add-to-var LD_LIBRARY_PATH        $GDAL_ROOT_DIR/lib
        }

    is-root-path $SALOME_BIN_MODULES $NETCDF_ROOT_DIR &&
        {
            add-to-var PATH                   $NETCDF_ROOT_DIR/bin
            add-to-var C_INCLUDE_PATH         $NETCDF_ROOT_DIR/include
            add-to-var CPLUS_INCLUDE_PATH     $NETCDF_ROOT_DIR/include
            add-to-var LIBRARY_PATH           $NETCDF_ROOT_DIR/lib
            add-to-var LD_LIBRARY_PATH        $NETCDF_ROOT_DIR/lib
        }

    is-root-path $SALOME_BIN_MODULES $EFICAS_TOOLS_ROOT_DIR &&
        {
            set-var EFICAS_NOUVEAU_ROOT  $EFICAS_TOOLS_ROOT_DIR
        }

    if [[ -z $PYTHON_VERSION ]]; then
        set-var PYTHON_VERSION $(python3 --version | cut -d' ' -f2 | cut -c1-3)
    fi

    unset -f define-var
    copy-function define-var-orig define-var

    #  Now that we have filtered out some modules we want to add the env
    #  for the extra built modules.
    #  We do that for each extra modules that are not the one being built.

    for MOD in ${SCBI_EXTRA_NG_MODULES//:/ }; do
        local DEF=( $(get-extra-module-def $MOD) )
        local PLG=${DEF[0]}

        if [[ $SCBI_CURRENT_MODULE != $PLG ]]; then
            handle-module-env "@root" $PLG env
        fi
    done

    true
}
