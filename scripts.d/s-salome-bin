
function s-salome-bin-depends()
{
    echo s-salome-tar
}

####################################################### WINDOWS

function s-salome-bin-ngwin-env()
{
    local IROOT=$(cygpath -m $SALOME_BIN_MODULES)
    local IEXT=$IROOT/EXT

    [[ -d $IROOT/cmake/bin ]] &&
        add-to-var PATH $IROOT/cmake/bin

    . ${SALOME_BIN_APPLICATION}/scbi_env.sh

    echo $GUI_ROOT_DIR > /home/ES4C769N/tmp_env.sh
    echo $CPPUNIT_ROOT_DIR_EXP >> /home/ES4C769N/tmp_env.sh

    #  Add some missing env vars
    set-var    LIBXML2_LIBRARY    $IEXT/lib/libxml2.lib
    add-to-var INCLUDE            "$BOOST_INCLUDE_DIR/boost"

    #HOMARD
    add-to-var PATH                   "C:\Program Files (x86)\Intel\oneAPI\compiler\2024.2\bin"
    add-to-var PATH                   $HOMARD_ROOT_DIR/bin
    add-to-var PATH                   $HOMARD_ROOT_DIR/bin/salome
    add-to-var PATH                   $HOMARD_ROOT_DIR/lib/salome

    add-to-var CMAKE_PREFIX_PATH  $OPENCV_ROOT_DIR/W64/EXT/x64/vc15/lib


    add-to-var CMAKE_PREFIX_PATH  \
	       $(last-modified-directory "$IROOT/cmake/share/cmake-*/Modules")
    add-to-var CMAKE_PREFIX_PATH  $IEXT
    add-to-var CMAKE_PREFIX_PATH  $IEXT/cmake
    add-to-var CMAKE_PREFIX_PATH  $KERNEL_ROOT_DIR/salome_adm/cmake_files
    add-to-var CMAKE_PREFIX_PATH  $GUI_ROOT_DIR/adm_local/cmake_files
    add-to-var CMAKE_PREFIX_PATH  $BOOST_ROOT_DIR/lib/cmake/tbb

    add-to-var CMAKE_PREFIX_PATH  $PARAVIEW_ROOT_DIR
    add-to-var CMAKE_PREFIX_PATH  $PARAVIEW_ROOT_DIR/lib/vtk
    add-to-var CMAKE_PREFIX_PATH  \
    	       $(last-modified-directory "$OSPRAY_ROOT_DIR/lib/cmake/ospray*")
    add-to-var CMAKE_PREFIX_PATH  \
	       $(last-modified-directory "$EMBREE_ROOT_DIR/lib/cmake/embree-*")
    add-to-var CMAKE_PREFIX_PATH  \
	       $(last-modified-directory "$RKCOMMON_ROOT_DIR/lib/cmake/rkcommon-*")
    add-to-var CMAKE_PREFIX_PATH  \
	       $(last-modified-directory "$OPENVKL_ROOT_DIR/lib/cmake/openvkl-*")

    add-to-var CMAKE_PREFIX_PATH  $Qt5_DIR/lib/cmake/Qt5
    add-to-var CMAKE_PREFIX_PATH  $Qt5_DIR/lib/cmake/Qt5Test
    add-to-var CMAKE_PREFIX_PATH  $Qt5_DIR/lib/cmake/Qt5UiTools
    add-to-var CMAKE_PREFIX_PATH  $Qt5_DIR/lib/cmake/Qt5OpenGL
    add-to-var CMAKE_PREFIX_PATH  $Qt5_DIR/lib/cmake/Qt5Xml
    add-to-var CMAKE_PREFIX_PATH  $Qt5_DIR/lib/cmake/Qt5DataVisualization

    add-to-var CMAKE_PREFIX_PATH  $IEXT/lib
    set-var CPPUNIT_ROOT_DIR      $IEXT
    set-var CPPUNIT_ROOT_DIR_EXP  $IEXT
    set-var CPPUNITHOME           $IEXT
    set-var CPPUNIT_ROOT          $IEXT
    add-to-var C_INCLUDE_PATH         $CPPUNIT_ROOT_DIR/include/cppunit
    add-to-var CPLUS_INCLUDE_PATH     $CPPUNIT_ROOT_DIR/include/cppunit
    add-to-var LIBRARY_PATH           $CPPUNIT_ROOT_DIR/lib
    add-to-var LD_LIBRARY_PATH        $CPPUNIT_ROOT_DIR/lib

#    is-root-path $SALOME_BIN_MODULES $HOMARD_ROOT_DIR &&
#        {
            # S inspirer de :
        #    add-to-var PATH                   $NETCDF_ROOT_DIR/bin
        #    add-to-var C_INCLUDE_PATH         $NETCDF_ROOT_DIR/include
        #    add-to-var CPLUS_INCLUDE_PATH     $NETCDF_ROOT_DIR/include
        #    add-to-var LIBRARY_PATH           $NETCDF_ROOT_DIR/lib
        #    add-to-var LD_LIBRARY_PATH        $NETCDF_ROOT_DIR/lib

# Variable deja prises en compte dans s-homard :
#            add-to-var PYTHONPATH                   $HOMARD_ROOT_DIR/lib/salome/python3.9/site-packages/salome
#            add-to-var SALOME_MODULES         HOMARD
#            add-to-var SalomeAppConfig    $PREFIX/share/salome/resources/homard
#            set-var    HOMARD_ROOT_DIR    $PREFIX
#            set-var    HOMARD_REP_EXE     $PREFIX/bin/salome
#            set-var    HOMARD_EXE         homard
    # variables à intégrer :
    #[HOMARD]
## context.addToPath(r"C:\Program Files (x86)\Intel\oneAPI\compiler\2024.2\bin")
# PAS besoin # context.setVariable(r"HOMARD_ROOT_DIR", r"C:\Users\MS3EC48L\Work\issue28716\homard\install", overwrite=True)
## context.addToPath(r"%HOMARD_ROOT_DIR%\bin")
# context.addToPath(r"%HOMARD_ROOT_DIR%\bin\salome")
# context.addToPath(r"%HOMARD_ROOT_DIR%\lib\salome")
# context.addToPythonPath(r"%HOMARD_ROOT_DIR%\bin\salome")
# context.addToPythonPath(r"%HOMARD_ROOT_DIR%\lib\salome")
# context.addToPythonPath(r"%HOMARD_ROOT_DIR%\lib\python3.9\site-packages\salome")
# context.appendVariable(r"SALOME_MODULES", r"HOMARD",separator=",")
# context.appendVariable(r"SalomeAppConfig", r"%HOMARD_ROOT_DIR%\share\salome\resources\homard",separator=";")
# context.setVariable(r"HOMARD_REP_EXE", r"%HOMARD_ROOT_DIR%\bin\salome", overwrite=True)
# context.setVariable(r"HOMARD_EXE", r"homard.exe", overwrite=True)
#        }
}

####################################################### LINUX

#  Returns 0 if VAR has ROOT as prefix
function is-root-path()
{
    local ROOT=$1
    local VAR=$2

    [[ -n $VAR ]] && [[ ${VAR#$ROOT} != $VAR ]]
}

function s-salome-bin-ng-env()
{
    copy-function define-var define-var-orig

    #  Redefine define-var to filter out modules that are otherwise
    #  rebuilt on top of the binary archive.

    function define-var()
    {
        local ACTION=$1
        local VAR=$2
        local VALUE=$3

        local FOUND=false

        for MOD in ${SCBI_EXTRA_NG_MODULES//:/ }; do
            local DEF=( $(get-extra-module-def $MOD) )
            local PAT=${DEF[1]}

            if [[ -n $PAT ]] && [[ $PAT != "()" ]]; then
                if [[ $VALUE =~ $PAT ]] || [[ $VAR =~ $PAT ]]; then
                    FOUND=true
                    break
                fi
            fi
        done

        if [[ $FOUND == false ]]; then
            define-var-orig $ACTION $VAR $VALUE
        fi
    }

    #  This section is to set in the PATH a proper version of
    #  CMake. It is either the one actually in the PATH or provided in
    #  the binary archive.  Note that we ensure we will never be using
    #  a version older than the one provided in the binary archive,
    #  but we may have one more recent for building softwares in
    #  clusters for example.

    #  Local CMAKE version
    local LOCCMAKE=
    #  BIN CMAKE version
    local BINCMAKE=

    local SCBI_CMAKE_PATH=$(which cmake)

    if [[ -z $SCBI_CMAKE_PATH ]]; then
	#  No system or user's env CMake found
	LOCCMAKE=0
    else
	#  We have a CMake in the PATH, get its version
	LOCCMAKE=( $($SCBI_CMAKE_PATH --version) )
	LOCCMAKE=${LOCCMAKE[2]}
        SCBI_CMAKE_PATH=$(dirname $SCBI_CMAKE_PATH)
    fi

    if [[ -d $SALOME_BIN_MODULES/cmake/bin ]]; then
	#  We have a CMake in binary archive, get its version
	BINCMAKE=( $($SALOME_BIN_MODULES/cmake/bin/cmake --version) )
	BINCMAKE=${BINCMAKE[2]}

	#  Use this version of CMake only if it is greater than the one
	#  provided in the binary archive.

	check-versions $BINCMAKE ">" $LOCCMAKE

	[[ $? == 0 ]] &&
            SCBI_CMAKE_PATH=$SALOME_BIN_MODULES/cmake/bin
    fi

    . ${SALOME_BIN_APPLICATION}/scbi_env.sh

    #  Sentinel variable used as separator between the binary env coming
    #  from scbi_env.sh above and the explicit setting below. This is needed
    #  by s-salome/ng to generate the final environment for the application.

    set-var SCBI_SALOME_BIN_ENV_SECTION yes

    #  Only if not defined in env_launch

    [[ -z $PYTHON_VERSION ]] &&
	{
	    # Get Python version
	    PYTHON_VERSION=$(python3 --version | cut -d' ' -f2)
	    # And remove the micro version
	    PYTHON_VERSION=${PYTHON_VERSION%.*}
	}

    set-var PYTHON_VERSION $PYTHON_VERSION

    #  Set CMake if necessary to possibly overwrite the one from binary archive

    [[ -n $SCBI_CMAKE_PATH ]] &&
        prepend-to-var PATH $SCBI_CMAKE_PATH

    #  Some missing settings in scbi_env.sh

    if [[ -d $SALOME_BIN_MODULES/libxml2/bin ]]; then
        local LXDIR=$SALOME_BIN_MODULES/libxml2

        add-to-var PATH               $LXDIR/bin
        add-to-var C_INCLUDE_PATH     $LXDIR/include/libxml2
        add-to-var CPLUS_INCLUDE_PATH $LXDIR/include/libxml2
        add-to-var LIBRARY_PATH       $LXDIR/lib
    fi

    add-to-var CMAKE_PREFIX_PATH  $BOOST_ROOT_DIR/lib/cmake
    add-to-var CMAKE_PREFIX_PATH  $GEOM_ROOT_DIR/adm_local/cmake_files
    add-to-var CMAKE_PREFIX_PATH  $GUI_ROOT_DIR/adm_local/cmake_files
    add-to-var CMAKE_PREFIX_PATH  $KERNEL_ROOT_DIR/salome_adm/cmake_files
    add-to-var CMAKE_PREFIX_PATH  $LIBBATCH_ROOT_DIR/share/cmake/libbatch
    add-to-var CMAKE_PREFIX_PATH  $MEDCOUPLING_ROOT_DIR/cmake_files
    add-to-var CMAKE_PREFIX_PATH  $OPENCV_ROOT_DIR/share/OpenCV
    add-to-var CMAKE_PREFIX_PATH  $OPENTURNS_ROOT_DIR/lib/cmake/openturns
    add-to-var CMAKE_PREFIX_PATH  $OPENTURNS_ROOT_DIR/lib/cmake/otmoris
    add-to-var CMAKE_PREFIX_PATH  $PY2CPP_ROOT_DIR/lib/cmake/py2cpp
    add-to-var CMAKE_PREFIX_PATH  $QT5_ROOT_DIR/lib/$SCBI_TARGET/cmake
    add-to-var CMAKE_PREFIX_PATH  $QWT_ROOT_DIR
    add-to-var CMAKE_PREFIX_PATH  $YACS_ROOT_DIR/adm/cmake
    add-to-var CMAKE_PREFIX_PATH  $YDEFX_ROOT_DIR/salome_adm/cmake_files
    add-to-var CMAKE_PREFIX_PATH  $ZEROMQ_ROOT_DIR/share/cmake/ZeroMQ
    add-to-var CMAKE_PREFIX_PATH  $EIGEN_ROOT_DIR/share/eigen3/cmake
    add-to-var CMAKE_PREFIX_PATH  $CAS_ROOT_DIR/lib/cmake/opencascade

    add-to-var CMAKE_PREFIX_PATH  \
               $(last-modified-directory $EMBREE_ROOT_DIR/lib/cmake/embree-*)
    add-to-var CMAKE_PREFIX_PATH  \
               $(last-modified-directory $OSPRAY_ROOT_DIR/lib/cmake/ospray-*)
    add-to-var CMAKE_PREFIX_PATH  \
               $(last-modified-directory \
                     $PARAVIEW_ROOT_DIR/lib/cmake/paraview-*)
    add-to-var CMAKE_PREFIX_PATH  \
               $(last-modified-directory \
                     $PARAVIEW_ROOT_DIR/lib/cmake/paraview-*/vtk)

    is-root-path $SALOME_BIN_MODULES $QT5_ROOT_DIR &&
        {
            add-to-var CMAKE_PREFIX_PATH  $QT5_ROOT_DIR/lib/cmake
        }

    is-root-path $SALOME_BIN_MODULES $PY2CPP_ROOT_DIR &&
        {
            add-to-var C_INCLUDE_PATH     $PY2CPP_ROOT_DIR/include
            add-to-var CPLUS_INCLUDE_PATH $PY2CPP_ROOT_DIR/include
        }

    is-root-path $SALOME_BIN_MODULES $MPI_ROOT_DIR &&
        {
            add-to-var C_INCLUDE_PATH     $MPI_ROOT_DIR/include
            add-to-var CPLUS_INCLUDE_PATH $MPI_ROOT_DIR/include
        }

    is-root-path $SALOME_BIN_MODULES $OMNIORB_ROOT_DIR &&
        {
            add-to-var C_INCLUDE_PATH     $OMNIORB_ROOT_DIR/include
            add-to-var CPLUS_INCLUDE_PATH $OMNIORB_ROOT_DIR/include
        }

    is-root-path $SALOME_BIN_MODULES $MEDFILE_ROOT_DIR &&
        {
            add-to-var C_INCLUDE_PATH     $MEDFILE_ROOT_DIR/include
            add-to-var CPLUS_INCLUDE_PATH $MEDFILE_ROOT_DIR/include
        }

    is-root-path $SALOME_BIN_MODULES $PTSCOTCH_ROOT_DIR &&
        {
            add-to-var C_INCLUDE_PATH         $PTSCOTCH_ROOT_DIR/include
            add-to-var CPLUS_INCLUDE_PATH     $PTSCOTCH_ROOT_DIR/include
            add-to-var PATH                   $PTSCOTCH_ROOT_DIR/bin
            add-to-var LIBRARY_PATH           $PTSCOTCH_ROOT_DIR/lib
            set-var    PTSCOTCH_INCLUDE_DIRS  $PTSCOTCH_ROOT_DIR/include
            set-var    PTSCOTCH_LIBRARIES     \
                       $PTSCOTCH_ROOT_DIR/lib/libptscotch.a
            set-var    PTSCOTCH_ERR_LIBRARIES \
                       $PTSCOTCH_ROOT_DIR/lib/libptscotcherr.a
        }

    is-root-path $SALOME_BIN_MODULES $SCOTCH_ROOT_DIR &&
        {
            add-to-var C_INCLUDE_PATH         $SCOTCH_ROOT_DIR/include
            add-to-var CPLUS_INCLUDE_PATH     $SCOTCH_ROOT_DIR/include
            add-to-var PATH                   $SCOTCH_ROOT_DIR/bin
            add-to-var LIBRARY_PATH           $SCOTCH_ROOT_DIR/lib
            set-var    SCOTCH_INCLUDE_DIRS    $SCOTCH_ROOT_DIR/include
            set-var    SCOTCH_LIBRARIES     \
                       $SCOTCH_ROOT_DIR/lib/libscotch.a
            set-var    SCOTCH_ERR_LIBRARIES \
                       $SCOTCH_ROOT_DIR/lib/libscotcherr.a
        }

    add-to-var PATH                   $ISPC_ROOT_DIR/bin
    add-to-var PATH                   $SALOME_BIN_MODULES/llvm/bin

    is-root-path $SALOME_BIN_MODULES $GDAL_ROOT_DIR &&
        {
            add-to-var PATH                   $GDAL_ROOT_DIR/bin
            add-to-var C_INCLUDE_PATH         $GDAL_ROOT_DIR/include
            add-to-var CPLUS_INCLUDE_PATH     $GDAL_ROOT_DIR/include
            add-to-var LIBRARY_PATH           $GDAL_ROOT_DIR/lib
            add-to-var LD_LIBRARY_PATH        $GDAL_ROOT_DIR/lib
        }

    is-root-path $SALOME_BIN_MODULES $NETCDF_ROOT_DIR &&
        {
            add-to-var PATH                   $NETCDF_ROOT_DIR/bin
            add-to-var C_INCLUDE_PATH         $NETCDF_ROOT_DIR/include
            add-to-var CPLUS_INCLUDE_PATH     $NETCDF_ROOT_DIR/include
            add-to-var LIBRARY_PATH           $NETCDF_ROOT_DIR/lib
            add-to-var LD_LIBRARY_PATH        $NETCDF_ROOT_DIR/lib
        }

    is-root-path $SALOME_BIN_MODULES $EFICAS_TOOLS_ROOT_DIR &&
        {
            set-var EFICAS_NOUVEAU_ROOT  $EFICAS_TOOLS_ROOT_DIR
        }

    is-root-path $SALOME_BIN_MODULES $SMESH_ROOT_DIR &&
        {
            add-to-var PYTHONPATH    $SMESH_ROOT_DIR/share/salome/plugins/smesh
            add-to-var PYTHONPATH    $SMESH_ROOT_DIR/share/salome/plugins/smesh/MacMesh
            add-to-var PYTHONPATH    $SMESH_ROOT_DIR/share/salome/plugins/smesh/Verima
        }

    is-root-path $SALOME_BIN_MODULES $HDF5_ROOT_DIR &&
        {
            add-to-var CMAKE_PREFIX_PATH  $HDF5_ROOT_DIR/share/cmake/hdf5
            set-var    HDF5_LIB           $HDF5_ROOT_DIR/lib
            set-var    HDF5_LIBRARIES     \
                       "$HDF5_ROOT_DIR/lib/libhdf5.so;$HDF5_ROOT_DIR/lib/libhdf5_cpp.so"
            add-to-var C_INCLUDE_PATH     $HDF5_INCLUDE_DIRS
            add-to-var CPLUS_INCLUDE_PATH $HDF5_INCLUDE_DIRS
        } ||
            {
                #  We are in NG mode and HDF5 is not provided in the binaries,
                #  use the OS one.
                set-var    HDF5_ROOT_DIR      /usr
                set-var    HDF5_LIB           $HDF5_ROOT_DIR/lib
                set-var    HDF5_LIBRARIES     \
                           "$(get-os-lib serial/libhdf5.so);$(get-os-lib serial/libhdf5_cpp.so)"
                add-to-var C_INCLUDE_PATH     $(get-os-inc-dir serial/hdf5.h)
                add-to-var CPLUS_INCLUDE_PATH $(get-os-inc-dir serial/hdf5.h)
            }


    unset -f define-var
    copy-function define-var-orig define-var

    set-var SCBI_SALOME_BIN_ENV_SECTION extra

    #  Now that we have filtered out some modules we want to add the env
    #  for the extra built modules.
    #  We do that for each extra modules that are not the one being built.

    for MOD in ${SCBI_EXTRA_NG_MODULES//:/ }; do
        local DEF=( $(get-extra-module-def $MOD) )
        local PLG=${DEF[0]}

        if [[ $SCBI_CURRENT_MODULE != $PLG ]]; then
            handle-module-env "s-salome-bin" $PLG env
        fi
    done

    unset-var SCBI_SALOME_BIN_ENV_SECTION

    true
}
