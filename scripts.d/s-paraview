
function s-paraview-vcs()
{
    echo edf
    echo lfs
    echo git
    echo https://github.com/Kitware/ParaView.git
}

function s-paraview-archive()
{
    local VERSION=$1

    echo default
    echo --no-check-certificate
    echo wget
    echo https://minio.retd.edf.fr/salome/YAMM/Public/SALOME/sources/prerequis
    echo ParaView-$VERSION-source.tar.gz
}

function s-paraview-cea-archive()
{
    local VERSION=$1

    echo default
    echo none
    echo wget
    echo ftp://ftp.cea.fr/pub/salome/prerequisites
    echo ParaView-$VERSION.tar.gz
}

function s-paraview-ng-archive()
{
    local VERSION=$1

    echo default
    echo none
    echo cp
    echo $SCBI_BDIR/s-salome-tar/archive-src/ARCHIVES
    echo ParaView-$VERSION.tar.gz
}

function s-paraview-patches()
{
    local PREFIX=$1
    local TARGET=$2
    local VARIANT=$3
    local KIND=$4
    local REF=$5

    [[ $REF =~ "5.8" ]] && echo paraview-autoload.patch
    [[ $REF =~ "5.9" ]] && echo paraview-5.9.patch
    [[ $REF =~ "5.11" ]] &&
        {
            echo paraview-5.11.0-findcgns.patch
            echo paraview-5.11.0-client.patch
            echo paraview-5.11.0-gil.patch
            echo paraview-5.11.0-mpi4py.patch
            echo paraview-5.11.0-openturns-1.21.patch
            echo paraview-5.11.0-python-3.11.patch
        }
}

function s-paraview-mingw-patches()
{
    local PREFIX=$1
    local TARGET=$2
    local VARIANT=$3
    local KIND=$4
    local REF=$5

    # Implement the threshold version of openturns.
    # And add header files to allow compilation under MSYS2
    echo paraview-5.11.0.msys2.patch
}

function s-paraview-ng-build-depends()
{
    # To avoid Paraview configuration issue with cmake < 3.13
    # to detect cmake native.
    echo s-cmake
    echo s-salome-bin
}

function s-paraview-default-build-depends()
{
    echo os@-qtxmlpatterns5-dev-tools
    echo os@-fmt-dev
    echo os@-gl2ps-dev

    echo s-cmake
    echo git-lfs
}

function s-paraview-mingw-build-depends()
{
    echo os@-qtxmlpatterns5-dev-tools
    echo os@-utf8cpp
    echo os@-fmt-dev
    echo os@-gl2ps-dev

    echo s-cmake
}

function s-paraview-gdal-depends
{
    echo s-gdal
}

function s-paraview-egl-depends
{
    echo os@-egl1-mesa-dev
}

function s-paraview-mesa-depends
{
    echo os@-osmesa-dev
}

function s-paraview-headless-depends
{
    # default headless is using egl (another option is mesa)
    s-paraview-egl-depends $PREFIX $TARGET $VARIANT
}

function s-paraview-ospray-depends
{
    echo s-ospray
}

function s-paraview-vrpn-depends
{
    echo s-vrpn
}

function s-paraview-mpi-depends
{
    echo s-openmpi
}

function s-paraview-catalyst-depends
{
    echo s-catalyst
}

function s-paraview-default-depends()
{
    local PREFIX=$1
    local TARGET=$2
    local VARIANT=$3

    echo os@-python3-dev
    echo os@-x11-dev
    echo os@-xt-dev
    echo os@-pugixml

    echo s-qt
    echo s-hdf5
    echo s-openturns
}

function s-paraview-mingw-depends()
{
    local PREFIX=$1
    local TARGET=$2
    local VARIANT=$3

    echo os@-python3-dev
    echo os@-pugixml-dev
    echo os@-cli11
    echo os@-glew-dev
    echo os@-ogg-dev
    echo os@-theora-dev
    echo os@-haru-dev
    echo os@-protobuf-dev

    echo s-mesa
    echo s-boost
    echo s-qt
    echo s-hdf5
    echo s-openturns
    echo s-gdal
    echo s-cgns
    echo s-netcdf
    echo s-rkcommon
    echo s-embree
}

function s-paraview-env()
{
    local PREFIX=$1
    local TARGET=$2

    local CMAKE_PV=$(last-modified-directory "$PREFIX/lib*/cmake/paraview-*")

    set-var    PARAVIEW_ROOT_DIR    $PREFIX
    set-var    PARAVIEW_INSTALL_DIR $PREFIX

    add-to-var CMAKE_PREFIX_PATH    ${CMAKE_PV}
    add-to-var CMAKE_PREFIX_PATH    ${CMAKE_PV}/vtk
    add-to-var PATH                 $PREFIX/bin
    add-to-var PV_PLUGIN_PATH       \
               $(last-modified-directory "$PREFIX/lib*/paraview*/plugins")

    for PLIB in $(ls -d $PREFIX/lib* 2> /dev/null); do
	add-to-var LD_LIBRARY_PATH  $PLIB
	add-to-var PYTHONPATH       \
		   $PLIB/python$PYTHON_VERSION/site-packages
    done
}

function s-paraview-common-config-options()
{
    local PREFIX=$1
    local TARGET=$2
    local VARIANT=$3

    echo -DCMAKE_BUILD_TYPE:STRING=$(get-build-type CMAKE Release)
    echo -DCMAKE_INSTALL_PREFIX=$PREFIX

    echo -DBUILD_EXAMPLES:BOOL=OFF
    echo -DBUILD_TESTING:BOOL=OFF

    echo -DPARAVIEW_USE_QT:BOOL=ON
    echo -DPARAVIEW_BUILD_SHARED_LIBS:BOOL=ON
    echo -DPARAVIEW_INSTALL_DEVELOPMENT_FILES:BOOL=ON
    echo -DPARAVIEW_INSTALL_DEVELOPMENT_FILES=ON

    echo -DPARAVIEW_ENABLE_OPENTURNS=ON
    echo -DPARAVIEW_ENABLE_WEB:BOOL=OFF

    echo -DPARAVIEW_USE_PYTHON:BOOL=ON
    echo -DPARAVIEW_PLUGIN_ENABLE_GeographicalMap=ON
    echo -DPARAVIEW_PLUGIN_ENABLE_NodeEditor=OFF
    echo -DPARAVIEW_PLUGIN_ENABLE_Moments:BOOL=OFF
    echo -DPARAVIEW_PLUGIN_ENABLE_SLACTools:BOOL=OFF
    echo -DPARAVIEW_PLUGIN_ENABLE_PacMan:BOOL=OFF
    echo -DPARAVIEW_PLUGIN_ENABLE_pvblot:BOOL=OFF
    echo -DPARAVIEW_PLUGIN_ENABLE_SurfaceLIC=OFF

    # Auto load

    echo -DPARAVIEW_PLUGIN_AUTOLOAD_AcceleratedAlgorithms=ON
    echo -DPARAVIEW_PLUGIN_AUTOLOAD_AnalyzeNIfTIReaderWriter=ON
    echo -DPARAVIEW_PLUGIN_AUTOLOAD_ArrowGlyph=ON
    echo -DPARAVIEW_PLUGIN_AUTOLOAD_BagPlotViewsAndFilters=ON
    echo -DPARAVIEW_PLUGIN_AUTOLOAD_Datamine=ON
    echo -DPARAVIEW_PLUGIN_AUTOLOAD_DigitalRockPhysics=ON
    echo -DPARAVIEW_PLUGIN_AUTOLOAD_EmbossingRepresentations=ON
    echo -DPARAVIEW_PLUGIN_AUTOLOAD_ExplicitStructuredGrid=ON
    echo -DPARAVIEW_PLUGIN_AUTOLOAD_FlipBookPlugin=ON
    echo -DPARAVIEW_PLUGIN_AUTOLOAD_GMVReader=ON
    echo -DPARAVIEW_PLUGIN_AUTOLOAD_GenericIOReader=ON
    echo -DPARAVIEW_PLUGIN_AUTOLOAD_GeodesicMeasurement=ON
    echo -DPARAVIEW_PLUGIN_AUTOLOAD_GeographicalMap=ON
    echo -DPARAVIEW_PLUGIN_AUTOLOAD_HyperTreeGridADR=ON
    echo -DPARAVIEW_PLUGIN_AUTOLOAD_LANLX3DReader=ON
    echo -DPARAVIEW_PLUGIN_AUTOLOAD_LagrangianParticleTracker=ON
    echo -DPARAVIEW_PLUGIN_AUTOLOAD_LegacyExodusReader=ON
    echo -DPARAVIEW_PLUGIN_AUTOLOAD_Moments=ON
    echo -DPARAVIEW_PLUGIN_AUTOLOAD_MooseXfemClip=ON
    echo -DPARAVIEW_PLUGIN_AUTOLOAD_NonOrthogonalSource=ON
    echo -DPARAVIEW_PLUGIN_AUTOLOAD_PanoramicProjectionView=ON
    echo -DPARAVIEW_PLUGIN_AUTOLOAD_ParametricSurfaces=ON
    echo -DPARAVIEW_PLUGIN_AUTOLOAD_SLACTools=ON
    echo -DPARAVIEW_PLUGIN_AUTOLOAD_SaveStateAndScreenshot=ON
    echo -DPARAVIEW_PLUGIN_AUTOLOAD_StreamLinesRepresentation=ON
    echo -DPARAVIEW_PLUGIN_AUTOLOAD_StreamingParticles=ON
    echo -DPARAVIEW_PLUGIN_AUTOLOAD_SurfaceLIC=ON
    echo -DPARAVIEW_PLUGIN_AUTOLOAD_ThickenLayeredCells=ON
    echo -DPARAVIEW_PLUGIN_AUTOLOAD_VTKmFilters=ON

    # VTK

    echo -DVTK_ALL_NEW_OBJECT_FACTORY=ON
    echo -DVTK_BUILD_QT_DESIGNER_PLUGIN:BOOL=OFF
    echo -DVTK_NO_PYTHON_THREADS=OFF
    echo -DVTK_PYTHON_FULL_THREADSAFE=ON
    echo -DVTK_PYTHON_VERSION=3
    echo -DVTK_SMP_IMPLEMENTATION_TYPE=OpenMP
    echo -DVTK_USE_64BIT_IDS:BOOL=ON
    echo -DVTK_MODULE_USE_EXTERNAL_VTK_netcdf=ON
    echo -DVTK_MODULE_ENABLE_VTK_RenderingLOD=YES
    echo -DVTK_MODULE_ENABLE_VTK_FiltersCore=YES
    echo -DVTK_MODULE_ENABLE_VTK_CommonCore=YES
    echo -DVTK_MODULE_ENABLE_VTK_IOCore=YES
    echo -DVTK_MODULE_ENABLE_VTK_IOEnSight=YES
    echo -DVTK_MODULE_ENABLE_VTK_IOInfovis=YES
}

function s-paraview-mpi-config-options()
{
    local PREFIX=$1
    local TARGET=$2
    local VARIANT=$3

    echo -DPARAVIEW_USE_MPI:BOOL=ON
    echo -DVTK_MODULE_ENABLE_VTK_ParallelMPI=YES
    echo -DVTK_MODULE_ENABLE_VTK_FiltersParallelGeometry=YES
    echo -DVTK_MODULE_ENABLE_VTK_FiltersParallelMPI=YES
}

function s-paraview-ospray-config-options()
{
    local PREFIX=$1
    local TARGET=$2
    local VARIANT=$3

    echo -DPARAVIEW_ENABLE_RAYTRACING:BOOL=ON
}

function s-paraview-vrpn-config-options()
{
    local PREFIX=$1
    local TARGET=$2
    local VARIANT=$3

    echo -DPARAVIEW_USE_MPI:BOOL=ON
    echo -DPARAVIEW_BUILD_PLUGIN_VRPlugin:BOOL=ON
    echo -DPARAVIEW_USE_VRPN:BOOL=ON
    echo -DPARAVIEW_AUTOLOAD_PLUGIN_VRPlugin=ON
    echo -DVRPN_LIBRARY=$VRPN_ROOT_DIR/lib/libvrpn.a
    echo -DVRPN_INCLUDE_DIR=$VRPN_ROOT_DIR/include
}

function s-paraview-gdal-config-options()
{
    local PREFIX=$1
    local TARGET=$2
    local VARIANT=$3

    echo -DPARAVIEW_ENABLE_GDAL:BOOL=ON
}

function s-paraview-egl-config-options()
{
    local PREFIX=$1
    local TARGET=$2
    local VARIANT=$3

    echo -DVTK_OPENGL_HAS_EGL:BOOL=ON
    echo -DEGL_INCLUDE_DIR=/usr/include
    echo -DEGL_LIBRARY=$(get-os-lib libEGL.so)
    echo -DEGL_opengl_LIBRARY=$(get-os-lib libOpenGL.so)
}

function s-paraview-mesa-config-options()
{
    local PREFIX=$1
    local TARGET=$2
    local VARIANT=$3

    echo -DVTK_OPENGL_HAS_MESA:BOOL=ON
    echo -DOSMESA_INCLUDE_DIR=/usr/include
    echo -DOSMESA_LIBRARY=$(get-os-lib libOSMesa.so)
}

function s-paraview-catalyst-config-options()
{
    echo -DPARAVIEW_ENABLE_CATALYST=ON
}

function s-paraview-headless-config-options()
{
    local PREFIX=$1
    local TARGET=$2
    local VARIANT=$3

    echo -DVTK_OPENGL_HAS_EGL=ON
    echo -DVTK_USE_X=OFF
    echo -DVTK_DEFAULT_RENDER_WINDOW_HEADLESS=ON
    echo -DPARAVIEW_USE_QT:BOOL=OFF

    echo -DOPENGL_gl_LIBRARY=$(get-os-lib libGL.so)
    echo -DOPENGL_INCLUDE_DIR=$(get-os-inc-dir /usr/include/*/gl.h)
    echo -DOPENGL_EGL_INCLUDE_DIR=$(get-os-inc-dir /usr/include/*/egl.h)
    echo -DOPENGL_GLES2_INCLUDE_DIR=$(get-os-inc-dir /usr/include/*/gl2.h)
    echo -DOPENGL_GLES3_INCLUDE_DIR=$(get-os-inc-dir /usr/include/*/gl3.h)
    echo -DOPENGL_egl_LIBRARY=$(get-os-lib libEGL.so)
    echo -DOPENGL_opengl_LIBRARY=$(get-os-lib libGL.so)
    echo -DOPENGL_gles2_LIBRARY=$(get-os-lib libGLESv2.so)
}
function s-paraview-mingw-config-options()
{
    local PREFIX=$1
    local TARGET=$2
    local VARIANT=$3

    # python
    local PYTHONBIN=$(which python)

    echo -G"Ninja"
    echo -DVTK_IGNORE_CMAKE_CXX11_CHECKS=ON
    echo -DPARAVIEW_BUILD_SHARED_LIBS=ON
    echo -DPARAVIEW_ENABLE_LAS=ON
    echo -DPARAVIEW_VERSIONED_INSTALL=OFF
    echo -DPARAVIEW_BUILD_WITH_EXTERNAL=ON
    echo -DVTK_SMP_IMPLEMENTATION_TYPE=TBB
    echo -DVTK_MODULE_USE_EXTERNAL_VTK_exprtk=OFF
    echo -DVTK_MODULE_USE_EXTERNAL_VTK_ioss=OFF
    echo -DVTK_MODULE_USE_EXTERNAL_VTK_verdict=OFF
    echo -DVTK_MODULE_USE_EXTERNAL_VTK_hdf5=ON
    echo -DVTK_MODULE_USE_EXTERNAL_VTK_fmt=OFF
    echo -DHDF5_IS_PARALLEL=OFF
    echo -DHDF5_FIND_DEBUG=ON
    echo -DHDF5_ROOT=${HDF5_ROOT_DIR}
    echo -DHDF5_DIR=${HDF5_ROOT_DIR}/lib/cmake/hdf5
    echo -DHDF5_C_LIBRARY=${HDF5_ROOT_DIR}/lib/libhdf5.dll.a
    echo -DHDF5_INCLUDE_DIRS=${HDF5_ROOT_DIR}/include
    echo -DCGNS_LIBRARY=${CGNS_ROOT_DIR}/lib/libcgnsdll.dll.a
    echo -DCGNS_INCLUDE_DIR=${CGNS_ROOT_DIR}/include
    echo -DPython3_EXECUTABLE=${PYTHONBIN}
    echo -DOpenTURNS_DIR=${OT_ROOT_DIR}/lib/cmake/openturns
    echo -DGDAL_INCLUDE_DIR=${GDAL_ROOT_DIR}/include
    echo -DTBB_ROOT=${MINGW_PREFIX}
}

function s-paraview-config()
{
    local PREFIX=$1
    local TARGET=$2
    local VARIANT=$3

    local OPTIONS=()
    get-config-options OPTIONS $PREFIX $TARGET $VARIANT

    cmake "${OPTIONS[@]}" ../src
}

function s-paraview-mingw-config()
{
    local PREFIX=$1
    local TARGET=$2
    local VARIANT=$3

    local OPTIONS=()
    get-config-options OPTIONS $PREFIX $TARGET $VARIANT

    CXXFLAGS+=" -w -Wno-register" \
             cmake "${OPTIONS[@]}" ../src
}

function s-paraview-build()
{
    local PREFIX=$1
    local TARGET=$2

    make -j$SCBI_JOBS
}

function s-paraview-mingw-build()
{
    local PREFIX=$1
    local TARGET=$2

    cmake --build . -j$SCBI_JOBS
}

function s-paraview-install()
{
    local PREFIX=$1
    local TARGET=$2

    make install
}

function s-paraview-mingw-install()
{
    local PREFIX=$1
    local TARGET=$2

    cmake --install .
}

function s-paraview-post-install()
{
    local PREFIX=$1
    local TARGET=$2

    # FIXME
    # Hack to make paravis configure without issue otherwise we get
    # an error message:
    #
    # CMake Error at /...paraview-5.9/ParaViewPlugin.cmake:1380 (add_library):
    # Target "StaticMesh" links to target "MPI::MPI_C" but the target was not
    # found.  Perhaps a find_package() call is missing for an IMPORTED target,
    # or an ALIAS target is missing?

    IDIR=$(last-modified-directory ../install/lib*/cmake/paraview-*)

    [[ -d $IDIR ]] &&
        sed -i 's/COMPONENTS          C/#COMPONENTS          C/g' \
            $IDIR/vtk/VTK-vtk-module-find-packages.cmake

    return 0
}

function s-paraview-mingw-post-install()
{
    local PREFIX=$1
    local TARGET=$2

    local MESABIN=${SCBI_MODULES_DIR["s-mesa"]}/bin

    for DLL in opengl32.dll libgallium_wgl.dll \
                            libglapi.dll libEGL.dll libGLESv2.dll;
    do
        cp $MESABIN/$DLL ../install/bin
    done
}

function s-paraview-prefix()
{
    echo NONE
}
