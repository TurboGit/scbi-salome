

function s-salome-tar-out-of-tree()
{
    echo false
}

function s-salome-tar-env()
{
    local PREFIX=$1
    local TARGET=$2
    local VARIANT=$3

    local BINDIR=$(basename $(ls -1d $PREFIX/BINARIES-*))

    set-var SALOME_BIN_APPLICATION $PREFIX
    set-var SALOME_BIN_MODULES     $PREFIX/$BINDIR
}

function s-salome-tar-ngwin-env()
{
    local PREFIX=$1
    local TARGET=$2
    local VARIANT=$3

    set-var SALOME_BIN_APPLICATION $PREFIX
    set-var SALOME_BIN_MODULES     $PREFIX/W64
}

function s-salome-tar-install()
{
    local PREFIX=$1
    local TARGET=$2
    local VARIANT=$3

    #  Copy the tarball content into the application directory. This will
    #  be the part changed (see below) and used to create the new installer.

    dlog salome-tar Init SALOME sources

    cd ..
    ln -s build $PREFIX

    cd $PREFIX

    dlog salome-tar Remove unneeded data

    rm -fr ARCHIVES PROJECT sat logs.tgz

    dlog salome-tar Fix some paths

    #  Remove CONFIGURATION setting from env_launch.sh
    #  The configuration is not part of the binary archive so
    #  we use our own checkout.

    sed -i 's/^export\(.*CONFIGURATION_ROOT_DIR.*\)/# export \1/g' \
        $PREFIX/env_launch.sh
    sed -i 's/    context\.\(.*CONFIGURATION_ROOT_DIR.*\)/#    context.setVariable(r"\1/g' \
        $PREFIX/salome

    #  Create the SCBI version of env_launch.sh -> env_scbi.sh
    #  We also patches some syntax error: out_dir_Path -> ${out_dir_Path}

    sed -e 's/export \(.*PATH\|INCLUDE\|SMESH_MeshersList\)=\([^:]*\):.*"$/add-to-var \1 \2"/' \
        -e 's/export SalomeAppConfig=[^:]*:\(.*\)"$/add-to-var SalomeAppConfig "\1"/' \
        -e 's/export PV_PLUGIN_PATH=\([^;]*\);\${PV_PLUGIN_PATH}"$/add-to-var PV_PLUGIN_PATH \1"/' \
        -e 's/export PV_PLUGIN_PATH="\${PV_PLUGIN_PATH};out_dir_Path\(.*\)"$/add-to-var PV_PLUGIN_PATH "\${out_dir_Path}\1"/' \
        -e 's/export \(.*\)=\([^:]*\)"$/set-var    \1 \2"/' \
        -e 's/export \(.*\)=\(.*\)$/set-var    \1 \2/' \
        env_launch.sh > scbi_env.sh

    #  Fix PATH in CMake pointing to the build-time environment

    #  ??? Note that this part may be tricky as we really want to replace
    #  individual strings.
    #  In "/volatile/.../INSTALL/dir1:/volatile/.../INSTALL/dir2" we don't
    #  want to replace by /new/path/dir2 because sed regular expressions
    #  are greedy. So we break the strings match using : ; or double-quotes.

    local ORIGDIR
    local BINDIR

    if [[ $VARIANT == "win" ]]; then
	ORIGDIR="E:/S/[^/]*/W64"
	BINDIR=W64
	TGTDIR=$(cygpath -m $PREFIX/$BINDIR)

	chmod u+x $BINDIR/qt
    else
	ORIGDIR="/volatile/[^:;\"]*workspace/[^/]*/[^/]*/INSTALL"
	BINDIR=$(basename $(ls -d $PREFIX/BINARIES-*))
	TGTDIR=\$ENV{KERNEL_ROOT_DIR}/../../$BINDIR
    fi

    find $PREFIX/ -type f -name "*.cmake" |
        while read F; do
            sed -i "s,$ORIGDIR/,$TGTDIR/,g" $F
        done

    if [[ $VARIANT != "win" ]]; then
	#  Fix wrong libtbb PATH pointing to the build-time environment

	find $PREFIX/$BINDIR/openturns -name "*.cmake" \
             -exec sed -i 's,"/lib/x86_64-linux-gnu/libtbb.so,"/usr/lib/x86_64-linux-gnu/libtbb.so,g' {} \;
    fi

    #  Need to fix (shebang) full path to python interpreter

    for SCRIPTS in omniORB/bin/omniidl \
                       hdf5/bin/h5hlcc hdf5/bin/h5cc \
                       netcdf/lib/pkgconfig/netcdf.pc \
                       PyQt/bin/pyuic5;
    do
        sed -i "s,${ORIGDIR},$PREFIX/$BINDIR,g" $PREFIX/$BINDIR/$SCRIPTS
    done

    #  Fix path (shebang) in bin/sip* scripts (not needed in Scibian-10)

    find $PREFIX/$BINDIR/sip/bin -type f -name "*sip*" |
        while read F; do
            sed -i "s,$ORIGDIR/,$PREFIX/$BINDIR/,g" $F
        done

    #  Fix path in Makefile and Python system configuration scripts

    find $PREFIX/$BINDIR/Python -type f \
         \( -name "Makefile" -o -name "_sysconfigdata*py" \) |
        while read F; do
            sed -i "s,$ORIGDIR/,$PREFIX/$BINDIR/,g" $F
        done

    #  Make appear Persalys's icon on Salome gui

    local ORDIR=$PREFIX/$BINDIR/OPENTURNS/share/salome/resources/openturns

    cp $ORDIR/SalomeApp.xml $ORDIR/SalomeAppSL.xml
}

function s-salome-tar-prefix()
{
    echo NONE
}
