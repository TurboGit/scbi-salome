
function s-salome-tar-setup()
{
    local PREFIX=$1
    local TARGET=$2
    local VARIANT=$3

    local BIN_ARCHIVE=$(basename ${SCBI_SALOME_BIN_ARCHIVE})
    local APPDIR=$(basename $BIN_ARCHIVE .tar.gz)
    local DO_EXTRACT=no

    #  If the md5 is not present locally

    if [[ ! -f ${BIN_ARCHIVE}.md5 ]]; then
        DO_EXTRACT=yes
    else
        #  Or the tarball is not the same
        diff -q \
             <( cat ${SCBI_SALOME_BIN_ARCHIVE}.md5 | cut -d' ' -f1 ) \
             <( cat ${BIN_ARCHIVE}.md5 | cut -d' ' -f1 )

        if [[ $? -ne 0 ]]; then
            DO_EXTRACT=yes
        fi
    fi

    #  We do extract it if needed

    if [[ $DO_EXTRACT == yes ]]; then
        dlog salome-tar Update SALOME bin from tarball
        rm -fr ../build/*
        tar --extract --directory=. --file=${SCBI_SALOME_BIN_ARCHIVE}

        if [[ $? == 0 ]]; then
            cp ${SCBI_SALOME_BIN_ARCHIVE}.md5 .
        else
            dlog salome-ng Fail to extract tarball
            exit 1
        fi
    fi
}

function s-salome-tar-env()
{
    local PREFIX=$1
    local TARGET=$2
    local VARIANT=$3

    add-to-var SALOME_BIN_APPLICATION $PREFIX
}

function s-salome-tar-install()
{
    local PREFIX=$1
    local TARGET=$2
    local VARIANT=$3

    local BIN_ARCHIVE=$(basename ${SCBI_SALOME_BIN_ARCHIVE})
    local APPLICATION=$PREFIX

    #  Copy the tarball content into the application directory. This will
    #  be the part changed (see below) and used to create the new installer.

    dlog salome-tar Init SALOME sources

    cd ..
    mkdir -p $APPLICATION

    #  The copy is done using hard links, so the actual new size on disk is 0.

    local APPDIR=$(basename $BIN_ARCHIVE .tar.gz)
    rsync -a --link-dest=../../$APPDIR ../$APPDIR/* install/.

    [[ $? -ne 0 ]] && dlog salome-ng Fail to copy sources && exit 1

    dlog salome-tar Fix some paths

    #  Remove CONFIGURATION setting from env_launch.sh
    #  The configuration is not part of the binary archive so
    #  we use our own checkout.

    sed -i 's/^export\(.*CONFIGURATION_ROOT_DIR.*\)/# export \1/g' \
        $APPLICATION/env_launch.sh

    #  Fix PATH in CMake pointing to the build-time environment

    ORIGDIR="/volatile/salome/jenkins/workspace/SALOMEBuilder/SALOME-9.8.0-native-DB10/INSTALL"

    BINDIR=$(basename $(ls -d $APPLICATION/BINARIES-*))

    find $APPLICATION/ -type f -name "*.cmake" | while read F; do
        sed -i "s,$ORIGDIR/,$APPLICATION/$BINDIR/,g" $F
    done

    # Fix wrong libtbb PATH pointing to the build-time environment

    find $APPLICATION/$BINDIR/openturns -name "*.cmake" \
         -exec sed -i 's,"/lib/x86_64-linux-gnu/libtbb.so,"/usr/lib/x86_64-linux-gnu/libtbb.so,g' {} \;

    # fix path (shebang) in bin/sip* scripts (not needed in Scibian-10)
    # NEED TO BE DONE for Scibian-9.
}

function s-salome-tar-prefix()
{
    echo NONE
}
