
function s-salome-tar-archive()
{
    local VERSION=$1

    # VERSION is : <SALOME_VERSION>:<OS>

    local VER=${VERSION/:*}
    local OS=${VERSION/*:}

    echo edf
    echo --no-check-certificate
    echo wget
    echo https://minio.retd.edf.fr/salome/Releases/development/CEA_archive
    echo SALOME-$VER-$OS-SRC.tar.gz
}

function s-salome-tar-ngwin-archive()
{
    local VERSION=$1

    # VERSION is : <SALOME_VERSION>:<OS>

    local VER=${VERSION/:*}
    local OS=${VERSION/*:}

    echo edf
    echo --no-check-certificate
    echo wget
    echo https://minio.retd.edf.fr/salome/Releases/development/CEA_archive
    echo SALOME-$VER.zip
}

function s-salome-tar-out-of-tree()
{
    echo false
}

function s-salome-tar-external-env()
{
    echo $SCBI_EXTRA_NG_MODULES ${SCBI_EXTRA_NG_DEFS[*]}
}

function s-salome-tar-env()
{
    local PREFIX=$1
    local TARGET=$2
    local VARIANT=$3

    local BINDIR=$(basename $(ls -1d $PREFIX/BINARIES-*))

    set-var SALOME_BIN_APPLICATION $PREFIX
    set-var SALOME_BIN_MODULES     $PREFIX/$BINDIR
}

function s-salome-tar-ngwin-env()
{
    local PREFIX=$1
    local TARGET=$2
    local VARIANT=$3

    set-var SALOME_BIN_APPLICATION $PREFIX
    set-var SALOME_BIN_MODULES     $PREFIX/W64
}

function comment-out-bat-block()
{
    local FILE=$1
    local PAT="$2"

    comment-out-block $FILE "setting environ for $PAT[^[:alpha:]]" "rem "
}

function comment-out-sh-block()
{
    local FILE=$1
    local PAT="$2"

    comment-out-block $FILE "setting environ for $PAT[^[:alpha:]]" "# "
}

function comment-out-python-block()
{
    local FILE=$1
    local PAT="$2"

    comment-out-block $FILE "#\[$PAT\]" "# "
}

function s-salome-tar-install()
{
    local PREFIX=$1
    local TARGET=$2
    local VARIANT=$3

    function replace-paths()
    {
        local PREFIX=$1
        local BINDIR=$2

        #  Need to fix (shebang) full path to python interpreter
        local FILE_SHEEBANG=( Python/bin/sphinx-build
                              matplotlib/bin/f2py
                              openturns/bin/f2py*
                              Python/bin/f2py*
                              C3PO/bin/f2py*
                              sip/bin/*sip* )

        local FILE_BASH=( hdf5/bin/h5hlcc
                          hdf5/bin/h5cc
                          netcdf/lib/pkgconfig/netcdf.pc
                          PyQt/bin/pyuic5 )

        local FILE_PY=( omniORB/bin/omniidl )

        local ODIR="#!/volatile"

        for SCRIPTS in ${FILE_SHEEBANG[*]}; do
            sed -i -e "s,$ODIR.*INSTALL*\(.*bin\)/\(.*\),#!/bin/env -S PATH=\${SALOME_BIN_MODULES}\1:\${PATH} \2,g" \
                $PREFIX/$BINDIR/$SCRIPTS
        done

        for SCRIPTS in ${FILE_BASH[*]}; do
            sed -i -e "s,/volatile/.*INSTALL,\${SALOME_BIN_MODULES},g" \
                $PREFIX/$BINDIR/$SCRIPTS
        done

        for SCRIPTS in ${FILE_PY[*]}; do
            sed -i -e "s,\"/volatile/.*INSTALL,os\.getenv\(\"SALOME_BIN_MODULES\"\) + \",g" \
                $PREFIX/$BINDIR/$SCRIPTS
        done
    }

    function sh_env2scbi()
    {
        local ENV_FILE=$1

        cat $ENV_FILE |
            sed -e 's/export LD_LIBRARY_PATH="\${LD_LIBRARY_PATH}:\(.*\)"$/add-to-var LD_LIBRARY_PATH "\1"/' \
                -e 's/export PYTHONPATH="\${PYTHONPATH}:\(.*\)"$/add-to-var PYTHONPATH "\1"/' \
                -e 's/export \(.*PATH\|INCLUDE\|SMESH_MeshersList\)=\([^:]*\):.*"$/add-to-var \1 \2"/' \
                -e 's/export SalomeAppConfig=[^:]*:\(.*\)"$/add-to-var SalomeAppConfig "\1"/' \
                -e 's/export PV_PLUGIN_PATH=\([^;]*\);\${PV_PLUGIN_PATH}"$/add-to-var PV_PLUGIN_PATH \1"/' \
                -e 's/export PV_PLUGIN_PATH="\${PV_PLUGIN_PATH};out_dir_Path\(.*\)"$/add-to-var PV_PLUGIN_PATH "\${out_dir_Path}\1"/' \
                -e 's/export \(.*\)=\([^:]*\)"$/set-var    \1 \2"/' \
                -e 's/export \(.*\)=\(.*\)$/set-var    \1 \2/'
    }

    function bat_env2scbi()
    {
        local ENV_FILE=$1

        tr -d '\r' < $ENV_FILE |
            sed -e 's/set HOME=/# set HOME=/g' \
                -e 's/@echo/# @echo/g' \
                -e 's/set LD_LIBRARY_PATH=%LD_LIBRARY_PATH%;\(.*\)$/add-to-var LD_LIBRARY_PATH "\1"/' \
                -e 's/set PYTHONPATH=%PYTHONPATH%;\(.*\)$/add-to-var PYTHONPATH "\1"/' \
                -e 's/set PATH=%PATH%;\(.*\)$/add-to-var PATH "\1"/' \
                -e 's/set PYTHONPATH=\([^;]*\);%PYTHONPATH%/add-to-var PYTHONPATH "\1"/' \
                -e 's/set \(.*PATH\|INCLUDE\|LIB\|LIBS\|OpenCV_INCLUDE_DIRS\|SMESH_MeshersList\)=\([^;]*\);.*/add-to-var \1 "\2"/' \
                -e 's/set SalomeAppConfig=%SalomeAppConfig%;\(.*\)$/add-to-var SalomeAppConfig "\1"/' \
                -e 's/set SalomeAppConfig=\(.*\);%SalomeAppConfig%$/prepend-to-var SalomeAppConfig "\1"/' \
                -e 's/set PV_PLUGIN_PATH=\([^;]*\);\${PV_PLUGIN_PATH}"$/prepend-to-var PV_PLUGIN_PATH \1"/' \
                -e 's/set PV_PLUGIN_PATH="\${PV_PLUGIN_PATH};out_dir_Path\(.*\)"$/add-to-var PV_PLUGIN_PATH "\${out_dir_Path}\1"/' \
                -e 's/set out_dir_Path=.*/set-var    out_dir_Path $(cygpath -m $(cd $(dirname ${BASH_SOURCE[0]});pwd))/g' \
                -e 's/set \(.*\)=\([^:]*\)"$/set-var    \1 \2"/' \
                -e 's/set \(.*\)=\(.*\)$/set-var    \1 "\2"/' \
                -e 's/^rem /# /g' \
                -e 's/%\([a-zA-Z_]*\)%/$\1/g' \
                -e 's,\\,/,g'
    }

    #  Copy the tarball content into the application directory. This will
    #  be the part changed (see below) and used to create the new installer.

    dlog salome-tar Init SALOME sources

    cd ..
    ln -s build $PREFIX

    cd $PREFIX

    dlog salome-tar Remove unneeded data

    mkdir artifacts
    mv logs.tgz artifacts
    mv PROJECT/products/patches artifacts
    mv .salome.modules.info artifacts

    rm -fr ARCHIVES sat PROJECT

    #  Store SCBI & SCBI-SALOME versions

    cp $SCBI_PLUGINS/.scbi_core_version.txt \
       artifacts/scbi_core_version.txt
    cp $SCBI_PLUGINS/.scbi_salome_version.txt \
       artifacts/scbi_salome_version.txt

    local BINDIR=$(ls -d BINARIES-*)

    #  Copy xmlpatterns over xmlpatterns-qt5 as the later is searched by ParaView
    #  during configuration and we may have it installed as native version on the
    #  OS. This would clash if the native version does not correspond to the one
    #  from the binrary archive.

    if [[ -f $BINDIR/qt/bin/xmlpatterns ]] &&
           [[ ! -f $BINDIR/qt/bin/xmlpatterns-qt5 ]];
    then
        cp $BINDIR/qt/bin/xmlpatterns $BINDIR/qt/bin/xmlpatterns-qt5
    fi

    #  Do remove HELLO and PYHELLO from the UI

    for M in HELLO PYHELLO; do
        sed -i -E "s,^.*SALOME_MODULES.*\"$M,#\0,g" \
            $PREFIX/salome
        sed -i -E "s,^.*SalomeAppConfig.*/$M/share/salome/resources/,#\0,g" \
            $PREFIX/salome
    done

    #  Now remove all extra modules found in the binary archive.
    #  And unset variables that are pointing to those directories.

    for MOD in ${SCBI_EXTRA_NG_MODULES//:/ } s-meshgems; do
        local DEF=( $(get-extra-module-def $MOD) )
        local PAT=${DEF[1]}

        #  We actually do not want to remove the directory because the
        #  installed cmake scripts in KERNEL do referencces those
        #  modules. This makes CMake unhappy as some variables
        #  VTK_ROOT_DIR_EXP or GUI_ROOT_DIR_EXP are then pointing to
        #  unexisting directories.

        #for dir in $(ls $BINDIR/. | egrep "$PAT"); do
        #    if [[ -d $BINDIR/$dir ]]; then
        #        rm -fr $BINDIR/$dir
        #    fi
        #done

        #  Ensure we match a whole word, then comment out variables
        #  pointing to the module.

        if [[ -n $PAT ]]; then
            #  Match a block starting with a pattern and ending
            #  by an empty line.
            if [[ $SCBI_IS_WINDOWS == yes ]]; then
                comment-out-bat-block $PREFIX/env_launch.bat "$PAT"
            else
                comment-out-sh-block $PREFIX/env_launch.sh "$PAT"
            fi
            comment-out-python-block $PREFIX/salome "$PAT"

	    PAT=$PAT'[^a-zA-Z_]'

            sed -i -E "s,^SUBDIRS.*$PAT,# \0,g" \
                $BINDIR/SALOME/bin/salome/test/CTestTestfile.cmake
        fi
    done

    dlog salome-tar Fix some paths

    #  Remove MESA setting from env_launch.sh

    sed -i 's,\(.*BINARI[^/]*/mesa\),# \1,g' $PREFIX/mesa_salome

    #  Remove CONFIGURATION setting from env_launch.sh & salome driver
    #  The configuration is not part of the binary archive so
    #  we use our own checkout.

    if [[ $SCBI_IS_WINDOWS == yes ]]; then
        comment-out-bat-block $PREFIX/env_launch.bat "CONFIGURATION"
    else
        comment-out-sh-block $PREFIX/env_launch.sh "CONFIGURATION"
    fi
    comment-out-python-block $PREFIX/salome "CONFIGURATION"

    #  Create the SCBI version of env_launch.sh -> env_scbi.sh
    #  We also patches some syntax error: out_dir_Path -> ${out_dir_Path}

    {
        if [[ $SCBI_IS_WINDOWS == yes ]]; then
            bat_env2scbi env_launch.bat
        else
            sh_env2scbi env_launch.sh

        fi
    } > scbi_env.sh

    #  Fix PATH in CMake pointing to the build-time environment

    #  ??? Note that this part may be tricky as we really want to replace
    #  individual strings.
    #  In "/volatile/.../INSTALL/dir1:/volatile/.../INSTALL/dir2" we don't
    #  want to replace by /new/path/dir2 because sed regular expressions
    #  are greedy. So we break the strings match using : ; or double-quotes.
    #
    #  The /volatile/.*/dir will be replaced by $ENV{SALOME_BIN_MODULES}/dir

    local ORIGDIR
    local TGTDIR=\$ENV{SALOME_BIN_MODULES}

    if [[ $VARIANT == "ngwin" ]]; then
        ORIGDIR="E:/S/[^/]*/W64"
        BINDIR=W64

        chmod u+x $BINDIR/qt
    else
        #  /INSTALL/ must be the end of the match for a single PATH. We
        #  transform it to a single \t (tab) character. This way we can
        #  easily use it as match terminator in ORIGDIR. And at the end
        #  this patch is rewritten, to \t is finally removed.
        INIT="s,/INSTALL/,/\t/,g"
        ORIGDIR="/(home|volatile)/[^:;\"]*(support|workspace)/[^\t]*/\t"
    fi

    find $PREFIX/ -type f -name "*.cmake" |
        while read F; do
            sed -i -E "$INIT;s,$ORIGDIR/,$TGTDIR/,g" $F
        done

    if [[ $VARIANT == "ngwin" ]]; then
	find $PREFIX/$BINDIR -type f | xargs -n 100 -d '\n' chmod a+x
    else
        #  Fix wrong libtbb PATH pointing to the build-time environment

        find $PREFIX/$BINDIR/openturns -name "*.cmake" \
             -exec sed -i 's,"/lib/x86_64-linux-gnu/libtbb.so,"/usr/lib/x86_64-linux-gnu/libtbb.so,g' {} \;
    fi

    replace-paths $PREFIX $BINDIR

    #  Fix path in Makefile and Python system configuration scripts

    find $PREFIX/$BINDIR/Python -type f \
         \( -name "Makefile" -o -name "_sysconfigdata*py" \) |
        while read F; do
            sed -i -E "$INIT;s,$ORIGDIR/,$PREFIX/$BINDIR/,g" $F
        done

    #  Fix path in gcc/lib64/ binaries scripts

    find $PREFIX/$BINDIR/gcc/lib64 -type f -name "*la*" |
        while read F; do
            sed -i -E "$INIT;s,$ORIGDIR/,$PREFIX/$BINDIR/,g" $F
        done

    #  Fix path in PyQt/bin/ binaries scripts

    find $PREFIX/$BINDIR/PyQt/bin/ -type f |
        while read F; do
            sed -i -E "$INIT;s,$ORIGDIR/,$PREFIX/$BINDIR/,g" $F
        done

    #  Make appear Persalys's icon on Salome gui

    local ORDIR=$PREFIX/$BINDIR/OPENTURNS/share/salome/resources/openturns

    cp $ORDIR/SalomeApp.xml $ORDIR/SalomeAppSL.xml

    #  Link SALOME help to EDF Website

    local LIGHTAPPGUI=$PREFIX/$BINDIR/GUI/share/salome/resources/gui/LightApp.xml

    if [[ -e $LIGHTAPPGUI ]]; then
        sed -i "s,https://www.salome-platform.org,https://salome.der.edf.fr,g" $LIGHTAPPGUI
        sed -i "s,https://discourse.salome-platform.org,https://forge.pleiade.edf.fr/projects/salome-rex/issues,g" $LIGHTAPPGUI
    fi
}

function s-salome-tar-prefix()
{
    echo NONE
}
