

function s-salome-tar-out-of-tree()
{
    echo false
}

function s-salome-tar-external-env()
{
    echo $SCBI_EXTRA_NG_MODULES ${SCBI_EXTRA_NG_DEFS[*]}
    echo $SCBI_CLEANUP_ARCHIVE
}

function s-salome-tar-env()
{
    local PREFIX=$1
    local TARGET=$2
    local VARIANT=$3

    local BINDIR=$(basename $(ls -1d $PREFIX/BINARIES-*))

    set-var SALOME_BIN_APPLICATION $PREFIX
    set-var SALOME_BIN_MODULES     $PREFIX/$BINDIR
}

function s-salome-tar-ngwin-env()
{
    local PREFIX=$1
    local TARGET=$2
    local VARIANT=$3

    set-var SALOME_BIN_APPLICATION $PREFIX
    set-var SALOME_BIN_MODULES     $PREFIX/W64
}

function comment-out-sh-block()
{
    local FILE=$1
    local PAT="$2"

    local TFILE=${FILE}.tmp

    cp -p $FILE $TFILE

    awk -v PAT="$PAT" \
        'BEGIN{PMATCH="^# .*for "PAT" *$"; comment=""}
         $0 ~ PMATCH{comment="# "}
         /^ *$/{comment=""}
         {print comment $0}' $FILE > $TFILE

    mv $TFILE $FILE
}

function comment-out-python-block()
{
    local FILE=$1
    local PAT="$2"

    local TFILE=${FILE}.tmp

    cp -p $FILE $TFILE

    awk -v PAT="$PAT" \
        'BEGIN{PMATCH="^ *#\["PAT"\]"; comment=""}
         $0 ~ PMATCH{comment="# "}
         /^ *$/{comment=""}
         {print comment $0}' $FILE > $TFILE

    mv $TFILE $FILE
}

function s-salome-tar-install()
{
    local PREFIX=$1
    local TARGET=$2
    local VARIANT=$3

    #  Copy the tarball content into the application directory. This will
    #  be the part changed (see below) and used to create the new installer.

    dlog salome-tar Init SALOME sources

    cd ..
    ln -s build $PREFIX

    cd $PREFIX

    dlog salome-tar Remove unneeded data

    mkdir artifacts
    mv logs.tgz artifacts
    mv PROJECT/products/patches artifacts

    rm -fr ARCHIVES sat PROJECT

    #  Store SCBI & SCBI-SALOME versions

    cp $SCBI_PLUGINS/.scbi_core_version.txt \
       artifacts/scbi_core_version.txt
    cp $SCBI_PLUGINS/.scbi_salome_version.txt \
       artifacts/scbi_salome_version.txt

    #  Do clean-up some modules for the release if needed

    local BINDIR=$(ls -d BINARIES-*)

    if [[ "$SCBI_CLEANUP_ARCHIVE" == "yes" ]]; then
        for M in HELLO PYHELLO CALCULATOR PYCALCULATOR; do
            rm -fr $BINDIR/$M

            local PAT="(${M}|${M}_ROOT_DIR)"
	    PAT=$PAT'[^a-zA-Z_]'

	    sed -i -E "s,^export .*=.*$PAT,# ,g" \
	        $PREFIX/env_launch.sh
	    sed -i -E "s,^ *(appendPath|context\.).*$PAT,#,g" \
	        $PREFIX/salome
        done
    fi

    #  Do remove HELLO and PYHELLO from the UI

    for M in HELLO PYHELLO; do
        sed -i -E "s,^.*SalomeAppConfig.*/$M/share/salome/resources/,#,g" \
            $PREFIX/salome
    done

    #  Now remove all extra modules found in the binary archive.
    #  And unset variables that are pointing to those directories.

    #  Protect some lines from being changed (prefix with @@@)

    sed -i -E 's/export (SALOME_MODULES|SALOME_MODULES_ORDER)=/@@@ /g' \
        $PREFIX/env_launch.sh
    sed -i -E 's/.*(r"SALOME_MODULES"|r"SALOME_MODULES_ORDER")/@@@ /g' \
        $PREFIX/salome

    for MOD in ${SCBI_EXTRA_NG_MODULES//:/ } s-meshgems; do
        local DEF=( $(get-extra-module-def $MOD) )
        local PAT=${DEF[1]}

        #  We actually do not want to remove the directory because the
        #  installed cmake scripts in KERNEL do referencces those
        #  modules. This makes CMake unhappy as some variables
        #  VTK_ROOT_DIR_EXP or GUI_ROOT_DIR_EXP are then pointing to
        #  unexisting directories.

        #for dir in $(ls $BINDIR/. | egrep "$PAT"); do
        #    if [[ -d $BINDIR/$dir ]]; then
        #        rm -fr $BINDIR/$dir
        #    fi
        #done

        #  Ensure we match a whole word, then comment out variables
        #  pointing to the module.

        if [[ ! -z $PAT ]]; then
            #  Match a block starting with a pattern and ending
            #  by an empty line.

            comment-out-sh-block $PREFIX/env_launch.sh "$PAT"

            comment-out-python-block $PREFIX/salome "$PAT"

	    PAT=$PAT'[^a-zA-Z_]'

            sed -i -E "s,^SUBDIRS.*$PAT,# ,g" \
                $BINDIR/SALOME/bin/salome/test/CTestTestfile.cmake
        fi
    done

    #  Retore back the protected lines (see above)

    sed -i 's/^@@@ \(.*\)/\1/g' $PREFIX/env_launch.sh $PREFIX/salome

    dlog salome-tar Fix some paths

    #  Remove MESA setting from env_launch.sh

    sed -i 's,\(.*BINARI[^/]*/mesa\),# \1,g' $PREFIX/mesa_salome

    #  Remove CONFIGURATION setting from env_launch.sh & salome driver
    #  The configuration is not part of the binary archive so
    #  we use our own checkout.

    comment-out-sh-block $PREFIX/env_launch.sh "CONFIGURATION"

    comment-out-python-block $PREFIX/salome "CONFIGURATION"

    #  Create the SCBI version of env_launch.sh -> env_scbi.sh
    #  We also patches some syntax error: out_dir_Path -> ${out_dir_Path}

    sed -e 's/export LD_LIBRARY_PATH="\${LD_LIBRARY_PATH}:\(.*\)"$/add-to-var LD_LIBRARY_PATH "\1"/' \
        -e 's/export PYTHONPATH="\${PYTHONPATH}:\(.*\)"$/add-to-var PYTHONPATH "\1"/' \
        -e 's/export \(.*PATH\|INCLUDE\|SMESH_MeshersList\)=\([^:]*\):.*"$/add-to-var \1 \2"/' \
        -e 's/export SalomeAppConfig=[^:]*:\(.*\)"$/add-to-var SalomeAppConfig "\1"/' \
        -e 's/export PV_PLUGIN_PATH=\([^;]*\);\${PV_PLUGIN_PATH}"$/add-to-var PV_PLUGIN_PATH \1"/' \
        -e 's/export PV_PLUGIN_PATH="\${PV_PLUGIN_PATH};out_dir_Path\(.*\)"$/add-to-var PV_PLUGIN_PATH "\${out_dir_Path}\1"/' \
        -e 's/export \(.*\)=\([^:]*\)"$/set-var    \1 \2"/' \
        -e 's/export \(.*\)=\(.*\)$/set-var    \1 \2/' \
        env_launch.sh > scbi_env.sh

    #  Fix PATH in CMake pointing to the build-time environment

    #  ??? Note that this part may be tricky as we really want to replace
    #  individual strings.
    #  In "/volatile/.../INSTALL/dir1:/volatile/.../INSTALL/dir2" we don't
    #  want to replace by /new/path/dir2 because sed regular expressions
    #  are greedy. So we break the strings match using : ; or double-quotes.
    #
    #  The /volatile/.*/dir will be replaced by $ENV{SALOME_BIN_MODULES}/dir

    local ORIGDIR
    local TGTDIR=\$ENV{SALOME_BIN_MODULES}

    if [[ $VARIANT == "win" ]]; then
        ORIGDIR="E:/S/[^/]*/W64"
        BINDIR=W64

        chmod u+x $BINDIR/qt
    else
        #  /INSTALL/ must be the end of the match for a single PATH. We
        #  transform it to a single 	 (tab) character. This way we can
        #  easily use it as match terminator in ORIGDIR. And at the end
        #  this patch is rewritten, to 	 is finally removed.
        INIT="s,/INSTALL/,/	/,g"
        ORIGDIR="/volatile/[^:;\"]*(support|workspace)/[^	]*/	"
    fi

    find $PREFIX/ -type f -name "*.cmake" |
        while read F; do
            sed -i -E "$INIT;s,$ORIGDIR/,$TGTDIR/,g" $F
        done

    if [[ $VARIANT != "win" ]]; then
        #  Fix wrong libtbb PATH pointing to the build-time environment

        find $PREFIX/$BINDIR/openturns -name "*.cmake" \
             -exec sed -i 's,"/lib/x86_64-linux-gnu/libtbb.so,"/usr/lib/x86_64-linux-gnu/libtbb.so,g' {} \;
    fi

    #  Need to fix (shebang) full path to python interpreter

    for SCRIPTS in omniORB/bin/omniidl \
                       Python/bin/sphinx-build \
                       hdf5/bin/h5hlcc hdf5/bin/h5cc \
                       netcdf/lib/pkgconfig/netcdf.pc \
                       PyQt/bin/pyuic5 \
                       matplotlib/bin/f2py;
    do
        [[ -e $PREFIX/$BINDIR/$SCRIPTS ]] &&
            sed -i -E "$INIT;s,${ORIGDIR},$PREFIX/$BINDIR,g" \
                $PREFIX/$BINDIR/$SCRIPTS
    done

    for SCRIPTS in $PREFIX/$BINDIR/openturns/bin/f2py* \
                       $PREFIX/$BINDIR/Python/bin/f2py* \
                       $PREFIX/$BINDIR/C3PO/bin/f2py*;
    do
        sed -i -E "$INIT;s,${ORIGDIR},$PREFIX/$BINDIR,g" $SCRIPTS
    done

    #  Fix path (shebang) in bin/sip* scripts (not needed in Scibian-10)

    find $PREFIX/$BINDIR/sip/bin -type f -name "*sip*" |
        while read F; do
            sed -i -E "$INIT;s,$ORIGDIR/,$PREFIX/$BINDIR/,g" $F
        done

    #  Fix path in Makefile and Python system configuration scripts

    find $PREFIX/$BINDIR/Python -type f \
         \( -name "Makefile" -o -name "_sysconfigdata*py" \) |
        while read F; do
            sed -i -E "$INIT;s,$ORIGDIR/,$PREFIX/$BINDIR/,g" $F
        done

    #  Fix path in gcc/lib64/ binaries scripts

    find $PREFIX/$BINDIR/gcc/lib64 -type f -name "*la*" |
        while read F; do
            sed -i -E "$INIT;s,$ORIGDIR/,$PREFIX/$BINDIR/,g" $F
        done

    #  Fix path in PyQt/bin/ binaries scripts

    find $PREFIX/$BINDIR/PyQt/bin/ -type f |
        while read F; do
            sed -i -E "$INIT;s,$ORIGDIR/,$PREFIX/$BINDIR/,g" $F
        done

    #  Make appear Persalys's icon on Salome gui

    local ORDIR=$PREFIX/$BINDIR/OPENTURNS/share/salome/resources/openturns

    cp $ORDIR/SalomeApp.xml $ORDIR/SalomeAppSL.xml

    #  Link SALOME help to EDF Website

    local LIGHTAPPGUI=$PREFIX/$BINDIR/GUI/share/salome/resources/gui/LightApp.xml

    if [[ -e $LIGHTAPPGUI ]]; then
        sed -i "s,https://www.salome-platform.org,https://salome.der.edf.fr,g" $LIGHTAPPGUI
    fi
}

function s-salome-tar-prefix()
{
    echo NONE
}
