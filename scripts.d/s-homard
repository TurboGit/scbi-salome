
function s-homard-vcs()
{
    echo default
    echo none
    echo git
    echo https://github.com/SalomePlatform/homard
}

function s-homard-salome-module()
{
    echo HOMARD
}

function s-homard-patches()
{
    local PREFIX=$1
    local TARGET=$2
    local VARIANT=$3
    local KIND=$4
    local REF=$5

    echo activate-homard-tests.patch
}

function s-homard-common-build-depends()
{
    echo s-cmake
    echo s-swig
    echo s-salome-bootstrap
}

function s-homard-default-build-depends()
{
    echo os@-sphinx-common
}

function s-homard-ngwin-build-depends()
{
    echo s-visual-c
    echo s-salome-bin
}

function s-homard-common-depends()
{
    echo s-salome-configuration
}

function s-homard-default-depends()
{
    echo s-qt
    echo s-pyqt
    echo os@-python3-sip-dev

    echo s-salome-kernel
    echo s-salome-gui
    echo s-med-file
    echo s-med-coupling
    echo s-geom
    echo s-smesh
}

function s-homard-ng-depends()
{
    echo s-salome-bin
}

function s-homard-env()
{
    local PREFIX=$1
    local TARGET=$2

    set-var    HOMARD_ROOT_DIR    $PREFIX
    set-var    HOMARD_REP_EXE     $PREFIX/bin/salome
    set-var    HOMARD_EXE         homard

    add-to-var LD_LIBRARY_PATH    $PREFIX/lib/salome
    add-to-var PYTHONPATH         \
               $PREFIX/lib/python$PYTHON_VERSION/site-packages/salome

    add-to-var SALOME_MODULES     HOMARD
    add-to-var SalomeAppConfig    $PREFIX/share/salome/resources/homard
}

function s-homard-ngwin-env()
{
    local PREFIX=$1
    local TARGET=$2

    echo -DCMAKE_INSTALL_PREFIX=$(cygpath -w "$PREFIX")

    echo -DCONFIGURATION_ROOT_DIR=$(cygpath -w "$CONFIGURATION_ROOT_DIR")
    #context.addToPath(r"C:\Program Files (x86)\Intel\oneAPI\compiler\2024.2\bin")
}

function s-homard-ctest-dir()
{
    local PREFIX=$1

    echo $PREFIX/bin/salome/test
}

function s-homard-ngwin-config-options()
{
    local PREFIX=$1
    local TARGET=$2
# section a comparer avec la commande fiche pleiade https://forge.pleiade.edf.fr/issues/28716
#    local CDEBUG=$(is-enabled cmake-debug)
#    local DISDOC=$(is-enabled no-doc)

    echo -DCMAKE_INSTALL_PREFIX=$(cygpath -w "$PREFIX")

    echo -DCONFIGURATION_ROOT_DIR=$(cygpath -w "$CONFIGURATION_ROOT_DIR")
    echo -DCMAKE_BUILD_TYPE=Release
    #echo -DSALOME_CMAKE_DEBUG=ON
    echo -DSALOME_BUILD_DOC=OFF
# doute sur ces 2 options : -DCMAKE_BUILD_TYPE=Release -DCMAKE_BUILD_PARALLEL_LEVEL=8 
#cmake -DCMAKE_INSTALL_PREFIX=C:\Users\ES4C769N\WP_DUC\install -DCONFIGURATION_ROOT_DIR=C:\Users\ES4C769N\Desktop\S_HOMARD\SOURCES\CONFIGURATION -DSALOME_BUILD_DOC=OFF  -S C:\Users\ES4C769N\Desktop\S_HOMARD\wp_DUC\FINAL\homard
}

function s-homard-config()
{
    local PREFIX=$1
    local TARGET=$2

    local CDEBUG=$(is-enabled cmake-debug)
    local DISDOC=$(is-enabled no-doc)

    cmake -DCMAKE_INSTALL_PREFIX=$PREFIX \
          -DCMAKE_BUILD_TYPE=$(get-build-type CMAKE Release) \
          -DSWIG_EXECUTABLE=${SWIG_ROOT_DIR}/bin/swig \
          ${CDEBUG:+"-DSALOME_CMAKE_DEBUG=ON"} \
          ${DISDOC:+"-DSALOME_BUILD_DOC=OFF"} \
          ../src
}

function s-homard-ngwin-config()
{
    local PREFIX=$1
    local TARGET=$2
    local VARIANT=$3

    local OPTIONS=()
    get-config-options OPTIONS $PREFIX $TARGET $VARIANT

    cmake -G "NMake Makefiles" "${OPTIONS[@]}" ../src
}

function s-homard-build()
{
    local PREFIX=$1
    local TARGET=$2

    make -j$SCBI_JOBS
}

function s-homard-ngwin-build()
{
    local PREFIX=$1
    local TARGET=$2

    nmake
}

function s-homard-install()
{
    local PREFIX=$1
    local TARGET=$2

    make install
}

function s-homard-ngwin-install()
{
    local PREFIX=$1
    local TARGET=$2

    nmake install
}

function s-homard-post-install()
{
    local PREFIX=$1
    local TARGET=$2

    # When building the documentation the .py & .med have been downloaded
    # by sphinx. We need the fr artifacts to be on top of the _downloads
    # directory for the tests to pass.

    cd ../install

    local DDIR=share/doc/salome/gui/HOMARD/fr/_downloads/

    if [ -d $DDIR ]; then
        (
            cd $DDIR
            for dir in $(ls -d *); do
                ln -s $dir/* .
            done
        )
    fi
}

function s-homard-ngwin-post-install()
{
    local PREFIX=$1
    local TARGET=$2
    # When building the documentation the .py & .med have been downloaded
    # by sphinx. We need the fr artifacts to be on top of the _downloads
    # directory for the tests to pass.

    cd ../install

    local DDIR=share/doc/salome/gui/HOMARD/fr/_downloads/

    if [ -d $DDIR ]; then
        (
            cd $DDIR
            for dir in $(ls -d *); do
                ln -s $dir/* .
            done
        )
    fi

# télécharger les librairies manquantes :
    wget salome/Releases/Additionnal_windows_lib/medfwrap.dll HOMARD_ROOT_DIR%\lib\salome
#     salome/Releases/Additionnal_windows_lib HOMARD_ROOT_DIR%\lib\salome
}

function s-homard-prefix()
{
    echo NONE
}
