
function s-homard-vcs()
{
    echo default
    echo none
    echo git
    echo https://gitlab.pleiade.edf.fr/salome/homard
}

function s-homard-cea-vcs()
{
    echo edf
    echo none
    echo git
    echo https://codev-tuleap.cea.fr/plugins/git/salome/homard
}

function s-homard-archive()
{
    local VERSION=$1

    echo default
    echo none
    echo wget
    echo https://minio.retd.edf.fr/salome/YAMM/Public/SALOME/sources/modules
    echo HOMARD_SRC_$VERSION.tgz
}

function s-homard-salome-module()
{
    echo HOMARD
}

function s-homard-patches()
{
    local PREFIX=$1
    local TARGET=$2
    local VARIANT=$3
    local KIND=$4
    local REF=$5

    echo activate-homard-tests.patch
}

function s-homard-ngwin-build-depends()
{
    echo s-visual-c
    echo s-salome-bin
}

function s-homard-common-build-depends()
{
    echo s-cmake
    echo os@-sphinx-common
}

function s-homard-ng-build-depends()
{
    echo s-cmake
    echo s-salome-bin
}

function s-homard-common-depends()
{
    echo s-salome-configuration
}

function s-homard-default-depends()
{
    echo s-qt
    echo s-pyqt
    echo os@-python3-sip-dev

    echo s-salome-kernel
    echo s-salome-gui
    echo s-medfichier
    echo s-medcoupling
    echo s-geom
    echo s-smesh
}

function s-homard-env()
{
    local PREFIX=$1
    local TARGET=$2

    set-var    HOMARD_ROOT_DIR    $PREFIX
    set-var    HOMARD_REP_EXE     $PREFIX/bin/salome
    set-var    HOMARD_EXE         homard

    add-to-var LD_LIBRARY_PATH    $PREFIX/lib/salome
    add-to-var PYTHONPATH         \
               $PREFIX/lib/python$PYTHON_VERSION/site-packages/salome

    add-to-var SALOME_MODULES     HOMARD
    add-to-var SalomeAppConfig    $PREFIX/share/salome/resources/homard
}

function s-homard-ctest-dir()
{
    local PREFIX=$1

    echo $PREFIX/bin/salome/test
}

function s-homard-common-config-options()
{
    local PREFIX=$1
    local TARGET=$2
    local VARIANT=$3

    local CDEBUG=$(is-enabled cmake-debug)

    echo -DCMAKE_BUILD_TYPE=$(get-build-type CMAKE Release)
    echo ${CDEBUG:+"-DSALOME_CMAKE_DEBUG=ON"}
}

function s-homard-config-options()
{
    local PREFIX=$1
    local TARGET=$2
    local VARIANT=$3

    echo -DCMAKE_INSTALL_PREFIX=$PREFIX
}

function s-homard-ngwin-config-options()
{
    local PREFIX=$1
    local TARGET=$2
    local VARIANT=$3

    echo -DCMAKE_INSTALL_PREFIX=$(cygpath -w "$PREFIX")
    echo -DCMAKE_BUILD_TYPE=$(get-build-type CMAKE Release)

    echo -DCONFIGURATION_ROOT_DIR=$(cygpath -w "$CONFIGURATION_ROOT_DIR")
}

function s-homard-config()
{
    local PREFIX=$1
    local TARGET=$2
    local VARIANT=$3

    local OPTIONS=()
    get-config-options OPTIONS $PREFIX $TARGET $VARIANT

    cmake "${OPTIONS[@]}" ../src
}

function s-homard-ngwin-config()
{
    local PREFIX=$1
    local TARGET=$2
    local VARIANT=$3

    local OPTIONS=()
    get-config-options OPTIONS $PREFIX $TARGET $VARIANT

    cmake -G "NMake Makefiles" "${OPTIONS[@]}" ../src
}

function s-homard-build()
{
    local PREFIX=$1
    local TARGET=$2

    make -j$SCBI_JOBS
}

function s-homard-ngwin-build()
{
    local PREFIX=$1
    local TARGET=$2

    nmake
}

function s-homard-install()
{
    local PREFIX=$1
    local TARGET=$2

    make install
}

function s-homard-ngwin-install()
{
    local PREFIX=$1
    local TARGET=$2

    nmake install
}

function s-homard-post-install()
{
    local PREFIX=$1
    local TARGET=$2

    # When building the documentation the .py & .med have been downloaded
    # by sphinx. We need the fr artifacts to be on top of the _downloads
    # directory for the tests to pass.

    cd ../install

    local DDIR=share/doc/salome/gui/HOMARD/fr/_downloads/

    if [ -d $DDIR ]; then
        (
            cd $DDIR
            for dir in $(ls -d *); do
                ln -s $dir/* .
            done
        )
    fi
}

function s-homard-prefix()
{
    echo NONE
}
