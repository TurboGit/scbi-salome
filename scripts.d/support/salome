#! /usr/bin/env python3

################################################################
# WARNING: this file is automatically generated by SalomeTools #
# WARNING: and so could be overwritten at any time.            #
################################################################

import os
import sys
import subprocess
import os.path

os.environ["SALOME_MODULES"] = ""

# Add the pwdPath to able to run the launcher after unpacking a package
# Used only in case of a salomeTools package
out_dir_Path=os.path.dirname(os.path.realpath(__file__))

# Preliminary work to initialize path to SALOME Python modules
def __initialize():

  sys.path[:0] = [ out_dir_Path + r'/EDF/s-salome-kernel/bin/salome' ]

  # define folder to store omniorb config (initially in virtual application folder)
  try:
    from salomeContextUtils import setOmniOrbUserPath
    setOmniOrbUserPath()
  except Exception as e:
    print(e)
    sys.exit(1)
# End of preliminary work

# salome doc only works for virtual applications. Therefore we overwrite it with this function
def _showDoc(modules):
    for module in modules:
      modulePath = os.getenv(module+"_ROOT_DIR")
      if modulePath != None:
        baseDir = os.path.join(modulePath, "share", "doc", "salome")
        docfile = os.path.join(baseDir, "gui", module.upper(), "index.html")
        if not os.path.isfile(docfile):
          docfile = os.path.join(baseDir, "tui", module.upper(), "index.html")
        if not os.path.isfile(docfile):
          docfile = os.path.join(baseDir, "dev", module.upper(), "index.html")
        if os.path.isfile(docfile):
          out, err = subprocess.Popen(["xdg-open", docfile]).communicate()
        else:
          print("Online documentation is not accessible for module:", module)
      else:
        print(module+"_ROOT_DIR not found!")

def main(args):
  # Identify application path then locate configuration files
  __initialize()

  if args == ['--help']:
    from salomeContext import usage
    usage()
    sys.exit(0)

  # Create a SalomeContext which parses configFileNames to initialize environment
  try:
    from salomeContext import SalomeContext, SalomeContextException
    if 'appendVariable' not in dir(SalomeContext):
      # check whether the appendVariable method is implemented
      def appendVariable(self, name, value, separator=os.pathsep):
        if value == '':
          return
        value = os.path.expandvars(value) # expand environment variables
        env = os.getenv(name, None)
        if env is None:
          os.environ[name] = value
        else:
          os.environ[name] = env + separator + value
        return
      SalomeContext.appendVariable = appendVariable

    context = SalomeContext(None)

    # Logger level error
    context.getLogger().setLevel(40)

    # Modifier cette variable pour ne pas rÃ©initialiser les PATHS"
    reinitialise_paths=True

    ## PRODUCT environment
    context.setVariable(r"SALOME_ON_DEMAND", r"HIDE", overwrite=True)
    context.setVariable(r"PYTHON_VERSION", r"3.7", overwrite=True)

    # [APPLI variables]
    context.setVariable(r"ABSOLUTE_APPLI_PATH", out_dir_Path + r"/EDF/s-salome-kernel", overwrite=True)
#    context.setVariable(r"APPLI", out_dir_Path + r"/salome", overwrite=True)
    context.addToPath(r"${ABSOLUTE_APPLI_PATH}/bin/salome")

    # Load all files env.d/*.py and call the module's init routine]

    extradir=out_dir_Path + r"/extra.env.d"

    if os.path.exists(extradir):
        import importlib
        import importlib.util
        sys.path.insert(0, os.path.join(os.getcwd(), extradir))
        for filename in sorted(
            filter(lambda x: os.path.isfile(os.path.join(extradir, x)),
                   os.listdir(extradir))):

            if filename.endswith(".py"):
                f = os.path.join(extradir, filename)
                module_name = os.path.splitext(os.path.basename(f))[0]
                _specs = importlib.util.find_spec(module_name)
                _module = importlib.util.module_from_spec(_specs)
                _specs.loader.exec_module(_module)
                _module.init(context, out_dir_Path)

    #[manage salome doc command]
    if len(args) >1 and args[0]=='doc':
        _showDoc(args[1:])
        return

    # Start SALOME, parsing command line arguments
    out, err, status = context.runSalome(args)
    sys.exit(status)

  except SalomeContextException as e:
    import logging
    logging.getLogger("salome").error(e)
    sys.exit(1)


if __name__ == "__main__":
  args = sys.argv[1:]
  main(args)
#
