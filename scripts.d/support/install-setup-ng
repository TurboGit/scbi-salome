#!/bin/bash

source $(dirname ${BASH_SOURCE[0]})/install-setup-common

AUTO=0

while [ ! -z $1 ]; do
    case "$1" in
        --auto)
            AUTO=1;
            break;
            ;;
        *)
            ;;
    esac
    shift;
done

# verify salome-prerequisites version
#
pkg="salome-prerequisites-__SALOMEVERSION__"
status=( $(get-pck-status "$pkg") )

installed=${status[0]}
candidate=${status[1]}
depository=${status[2]}
EXIT=0
if [[ "$installed" == "(none)" ]]; then
    echo "The package salome-prerequisites-__SALOMEVERSION__ is missing."
    echo "Follow these steps to install the package:"
    echo
    echo "      # Refresh your sources.list:"
    echo "          pkcon refresh"
    echo
    echo "      # Install the package:"
    echo "          pkcon install salome-prerequisites-__SALOMEVERSION__"
    echo
    EXIT=1
else
    if [[ "$candidate" != "(none)" && "$installed" != "$candidate" ]] || [[ "$installed" != "$depository" ]]; then
        echo "The package salome-prerequisites installed in your system is not up-to-date"
        echo "Follow these steps to update your package: "
        echo
        echo "      # Remove your obsolete version of salome-prerequisites-__SALOMEVERSION__:"
        echo "          pkcon remove salome-prerequisites-__SALOMEVERSION__"
        echo
        echo "      # Refresh your sources.list:"
        echo "          pkcon refresh"
        echo
        echo "      # Install the package:"
        echo "          pkcon install salome-prerequisites-__SALOMEVERSION__"
        EXIT=1
    fi
fi

if [[ $EXIT -ne "0" ]]; then
    read -p "Do you want to continue installation of salome? [Yes|No]"
    REPLY=${REPLY^^}

    if [[ "$REPLY" == "N" ]] ||
           [[ "$REPLY" == "NON" ]] ||
           [[ "$REPLY" == "NO" ]];
    then
        echo Installation stopped
        INSTALL_DIR=$PWD
        cd ../
        rm -rf $INSTALL_DIR
        exit 0
    fi
fi

# check for python3
#

BINDIR=$(basename $(ls -1d BINARIES-*))

if [[ $DISTRIBUTION_ID == "Debian" ]] && [[ $OS_VERSION == "9" ]]; then
    echo Python is embedded into salome on debian9
elif [[ "$(lsb_release -d)" =~ "Red Hat" ]]; then
    echo Python is embedded into salome on Red Hat
else
    if [ -z "$(python --version 2>&1 | grep ' 3\.')" ]; then
        echo Python2 is default, checking for python3

        if [ -f /usr/bin/python3 ]; then
            echo Found Python3 in /usr/bin/python3, setup links
            ln -s /usr/bin/python3 $BINDIR/SALOME/bin/salome/python
        else
            echo Cannot found a Python3 installation.
            echo SALOME will not work properly.
        fi
    fi
fi

# run create_catalog for clusters setup

[ -f create_catalog_ng.sh ] && ./create_catalog_ng.sh
[ -f CatalogResources.xml ] &&
    cp CatalogResources.xml $BINDIR/KERNEL/share/salome/resources/kernel/

#  Setup the HPC servers, the template file servers.pvsc will be used
#  by the following script to replace (and copy with date if exist)
#  the file in $HOME/.config/ParaView

CONFIG_PATH="$HOME/.config/ParaView"
USER_SERVER_PVSC="$CONFIG_PATH/servers.pvsc"
USER_PVSC_BACKUP=$USER_SERVER_PVSC"_"$(date '+%Y_%m_%d')

if [[ ! -d $CONFIG_PATH ]] ; then
    mkdir -p $CONFIG_PATH
fi

#  Check if a backup is needed

cp $USER_SERVER_PVSC $USER_PVSC_BACKUP

#  Copy the new servers.pvsc provided by the distrib

cp servers.pvsc $USER_SERVER_PVSC

#  substitute nni in servers.pvsc

sed -i "s/NNI_USER/$USER/g" $USER_SERVER_PVSC

#  check that the new pvsc is different or not
#  if the same we just delete the backup

diff -q $USER_SERVER_PVSC $USER_PVSC_BACKUP
if [[ $? -eq 0 ]]; then
    rm $USER_PVSC_BACKUP
else
    echo "Files $USER_SERVER_PVSC and servers.pvsc are different."
    echo "The backup $USER_PVSC_BACKUP has been created."
fi

echo Installing SALOME

# In AUTO mode we install in $PWD otherwise the install directory
# is asked to user.
prefix=$PWD
SUDO=""

if [[ $AUTO == 0 ]]; then
    prefix=$(get-install-directory \$HOME/opt/salome)

    SUDO=""

    check-writable $prefix || SUDO=sudo

    $SUDO mkdir -p $prefix
    $SUDO mv * .[a-z]* $prefix/
fi

template-conversion $prefix $DISTRIBUTION_ID $OS_VERSION

# Add icon link on desktop
create-desktop-icon $PWD __SALOMEVERSION__

if [[ $AUTO == 0 ]]; then
    $SUDO rm -f $prefix/setup

    $SUDO chown $USER -R $prefix
fi

echo "SALOME installation terminated, to start:"
echo "$ $prefix/salome"

exit 0
