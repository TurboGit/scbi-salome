#!/bin/bash

AUTO=0

# check that directory "$1" can be created
function check-writable()
{
    local DIR=$1

    while [[ ! -d $(dirname $DIR) ]]; do
          DIR=$(dirname $DIR)
    done

    [[ -w $(dirname $DIR) ]]
}

function template-conversion()
{
    local PREFIX=$1
    local DISTRIBUTION_ID=$2
    local OS_VERSION=$3
    # Convert the template files (omniidl, h5hlcc, ...)
    #

    local ORIG_BINDIR="__BINDIR__"
    local BINDIR=$(basename $(ls -1d $PREFIX/BINARIES-*))

    local FILES_LIST
    if [[ $DISTRIBUTION_ID -eq "Debian" ]] && [[ $OS_VERSION -eq "9" ]]; then
        FILES_LIST=(omniORB/bin/omniidl hdf5/bin/h5hlcc hdf5/bin/h5cc netcdf/lib/pkgconfig/netcdf.pc PyQt/bin/pyuic5)
    else
        FILES_LIST=(omniORB/bin/omniidl hdf5/bin/h5hlcc hdf5/bin/h5cc)
    fi
    for SCRIPTS in ${FILES_LIST[*]} ;
    do
        sed -i "s,${ORIG_BINDIR},$PREFIX/${BINDIR},g" $PREFIX/$BINDIR/$SCRIPTS
    done

    if [[ $DISTRIBUTION_ID -eq "Debian" ]] && [[ $OS_VERSION -eq "9" ]]; then
        #  For sip

        find $PREFIX/$BINDIR/sip/bin -type f -name "*sip*" |
            while read F; do
                sed -i "s,$ORIG_BINDIR,$PREFIX/${BINDIR},g" $F
            done

        #  For Python

        find $PREFIX/$BINDIR/Python -type f \
             \( -name "Makefile" -o -name "_sysconfigdata*py" \) |
            while read F; do
                sed -i "s,$ORIG_BINDIR,$PREFIX/${BINDIR},g" $F
            done
    fi
}

function get-pck-status()
{
    local PCK="$1"
    # Get the Installed & Candidate line, returns only the version for both
    # Also kills all suffix +* and .scibian* (pleiade issue : https://forge.pleiade.edf.fr/issues/22794)
    LANG=en_EN.UTF-8 apt-cache policy $PCK | grep -E "(Installed|Candidate)" | sed "s/: /|/" |
        cut -d'|' -f2
    apt-cache madison $PCK | cut -d'|' -f2
}

while [ ! -z $1 ]; do
    case "$1" in
        --auto)
            AUTO=1;
            break;
            ;;
        *)
            ;;
    esac
    shift;
done

# verify salome-prerequisites version
#
pkg="salome-prerequisites-__SALOMEVERSION__"
status=( $(get-pck-status "$pkg") )

installed=${status[0]}
candidate=${status[1]}
depository=${status[2]}
EXIT=0
if [[ "$installed" == "(none)" ]]; then
    echo "The package salome-prerequisites-__SALOMEVERSION__ is missing."
    echo "Follow these steps to install the package:"
    echo
    echo "      # Refresh your sources.list:"
    echo "          pkcon refresh"
    echo
    echo "      # Install the package:"
    echo "          pkcon install salome-prerequisites-__SALOMEVERSION__"
    echo
    EXIT=1
else
    if [[ "$candidate" != "(none)" && "$installed" != "$candidate" ]] || [[ "$installed" != "$depository" ]]; then
        echo "The package salome-prerequisites installed in your system is not up-to-date"
        echo "Follow these steps to update your package: "
        echo
        echo "      # Remove your obsolete version of salome-prerequisites-__SALOMEVERSION__:"
        echo "          pkcon remove salome-prerequisites-__SALOMEVERSION__"
        echo
        echo "      # Refresh your sources.list:"
        echo "          pkcon refresh"
        echo
        echo "      # Install the package:"
        echo "          pkcon install salome-prerequisites-__SALOMEVERSION__"
        EXIT=1
    fi
fi

if [[ $EXIT -ne "0" ]]; then
    read -p "Do you want to continue installation of salome? [y|Y|yes|o|O|oui/n|N|no|non]" FORCE_INSTALL
    INSTALL="n"
    case "$FORCE_INSTALL" in
        y|Y|yes|YES|Yes|o|O|oui|OUI|Oui)
            INSTALL="y"
            ;;
    esac
    if [[ $INSTALL != "y" ]]; then
        echo Installation stopped
        INSTALL_DIR=$PWD
        cd ../
        rm -rf $INSTALL_DIR
        exit 0
    fi
fi

# check for python3
#
TMPV=$(lsb_release -r | tr -d '[ \t]')
TMPV=${TMPV#*:}
OS_VERSION=${TMPV%.*}

TMPV=$(lsb_release -i | tr -d '[ \t]')
DISTRIBUTION_ID=${TMPV#*:}

if [[ $DISTRIBUTION_ID -eq "Debian" && $OS_VERSION -eq "9" ]]; then
    echo Python is embedded into salome on debian9
else
    if [ -z "$(python --version 2>&1 | grep ' 3\.')" ]; then
       echo Python2 is default, checking for python3
       if [ -f /usr/bin/python3 ]; then
          echo Found Python3 in /usr/bin/python3, setuup links
          BINDIR=$(basename $(ls -1d BINARIES-*))
          ln -s /usr/bin/python3 $BINDIR/SALOME/bin/salome/python
       else
          echo Cannot found a Python3 installation.
          echo SALOME will not work properly.
       fi
    fi
fi

# run create_catalog for clusters setup

[ -f create_catalog_ng.sh ] && ./create_catalog_ng.sh
[ -f CatalogResources.xml ] && cp CatalogResources.xml $BINDIR/KERNEL/share/salome/resources/kernel/

# In auto-mode, do nothing more
if [[ $AUTO -eq 1 ]]; then
    template-conversion $PWD $DISTRIBUTION_ID $OS_VERSION
    exit 0
fi

SUDO=""

echo Installing SALOME
echo
read -e -p "Install into (/opt/salome) : " prefix

[ -z $prefix ] && prefix=/opt/salome

# eval $prefix to expand environment variables if any
prefix=$(eval echo $prefix)

read -p "Ready to install SALOME in $prefix? (y/n) "

[ "$REPLY" != "y" -a "$REPLY" != "yes" ] && exit 1

check-writable $prefix || SUDO=sudo

$SUDO mkdir -p $prefix
$SUDO mv * .[a-z]* $prefix/
template-conversion $prefix $DISTRIBUTION_ID $OS_VERSION

$SUDO rm -f $prefix/setup

$SUDO chown $USER -R $prefix

# Setup the HPC servers, the template file servers.pvsc
# will be used by the following script to create or update
# the file $HOME/.config/ParaView
./salome_hpc_visu_servers.py

echo "SALOME installation terminated, to start:"
echo "$ $prefix/salome"
