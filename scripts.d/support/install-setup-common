#!/bin/bash

# =============================================== die
#
function die()
{
    local message=$1
    [ -z "$message" ] && message="Died"
    echo "${BASH_SOURCE[1]}: line ${BASH_LINENO[0]}: ${FUNCNAME[1]}: $message." >&2
    exit 1
}

# =============================================== check-writable
# check that directory "$1" can be created
function check-writable()
{
    local DIR=$1

    while [[ ! -d $(dirname $DIR) ]]; do
          DIR=$(dirname $DIR)
    done

    [[ -w $(dirname $DIR) ]]
}

# =============================================== get-edf-direction
function get-edf-direction()
{
    local PREFIX=$1
    local DIRECTION=$2

    #  Something to do only if 999_start_s_logger.py exists, and this
    #  happens only if the log of salome usage has been activated during
    #  the compilation.
    [[ ! -f $PREFIX/extra.env.d/999_start_s_logger.py ]] &&
        return

    #  If run on GitLab-CI ensure that the logger is fully deactivated
    if [[ -n $CI_PIPELINE_ID ]]; then
        rm -f $PREFIX/extra.env.d/999_start_s_logger.py
        return
    fi

    echo ""
    echo "Lors de l'utilisation de SALOME des informations sont remontées"
    echo "vers un serveur à des fin de statistiques:"
    echo "  - Les informations sont anonymes"
    echo "  - Les modules utilisés sont reportés"
    echo "  - Des informations plus détaillées sont récupérées pour SHAPER et GEOM"
    echo ""
    echo "Ces informations permettront de mieux connaître les usages"
    echo "de SALOME et de porter plus d'attention aux modules"
    echo "correspondants."
    echo ""
    echo "Merci d'indiquer votre direction:"

    direction=$DIRECTION

    while true; do
        direction=${direction^^}

        case $direction in
            RETD|DT|CEIDRE|EDVANCE|DIPDE|CNEPE|DIPNN)
                break;
                ;;
            *)
                echo "Erreur: direction $direction non reconnue."
                ;;
        esac
        read -e -p "(RetD, DT, DIPDE, CNEPE, CIH, CEIDRE, EDVANCE): " direction
    done

    # ??? If we accept spaces in direction we need to convert them as
    # "_" or remove them.
    #direction=${direction/ //_}

    sed -i "s/__DIRECTION__/$direction/g" \
        $PREFIX/extra.env.d/999_start_s_logger.py
}

# =============================================== get-install-directory
function get-install-directory()
{
    local DEFAULT_DIR=$1

    #  Check if --target has been specified. If so we expect SALOME to not
    #  be installed into /tmp.

    if [[ ${PWD:0:9} != "/tmp/self" ]]; then
        DEFAULT_DIR=$PWD
    fi

    local prefix=""

    while true; do
        read -e -p "Install into ($DEFAULT_DIR) : " prefix

        [[ -z $prefix ]] && prefix=$DEFAULT_DIR

        # eval $prefix to expand environment variables if any
        prefix=$(eval echo -n $prefix)

        read -p "Ready to install SALOME in $prefix? (Yes/No/Quit) "

        REPLY=${REPLY^^}

        [ "$REPLY" == "Q" -o "$REPLY" == "QUIT" ] && exit 1

        [ "$REPLY" == "Y" -o "$REPLY" == "YES" ] && break
    done

    echo -n $prefix
}

# =============================================== get-modules-dir

function get-modules-dir()
{
    local PREFIX=$1

    local BIN="unknown"

    local DIRS=($PREFIX/BINARIES-*)

    if [[ -d ${DIRS[0]} ]]; then
        BIN=${DIRS[0]}
    elif [[ -d $PREFIX/EDF ]]; then
        BIN=$PREFIX/EDF
    fi

    echo $(basename $BIN)
}

# =============================================== template-conversion
function template-conversion()
{
    local PREFIX=$1
    local DISTRIBUTION_ID=$2
    local OS_VERSION=$3

    # Convert the template files (omniidl, h5hlcc, ...)

    local ORIG_BINDIR="__BINDIR__"
    local BINDIR=$(get-modules-dir $PREFIX)

    local FILES_LIST=(*/bin/omniidl */bin/h5hlcc */bin/h5cc)

    if [[ $DISTRIBUTION_ID -eq "Debian" ]] && [[ $OS_VERSION -eq "9" ]]; then
        FILES_LIST+=(*/lib/pkgconfig/netcdf.pc */bin/pyuic5)
    fi

    for SCRIPTS in ${FILES_LIST[*]}; do
        sed -i "s,${ORIG_BINDIR},$PREFIX/${BINDIR},g" $PREFIX/$BINDIR/$SCRIPTS
    done

    if [[ $DISTRIBUTION_ID -eq "Debian" ]] && [[ $OS_VERSION -eq "9" ]]; then
        #  For sip

        find $PREFIX/$BINDIR/sip/bin -type f -name "*sip*" |
            while read F; do
                sed -i "s,$ORIG_BINDIR,$PREFIX/${BINDIR},g" $F
            done

        #  For Python

        find $PREFIX/$BINDIR/Python -type f \
             \( -name "Makefile" -o -name "_sysconfigdata*py" \) |
            while read F; do
                sed -i "s,$ORIG_BINDIR,$PREFIX/${BINDIR},g" $F
            done
    fi

    # Logger

    [[ -f $PREFIX/extra.env.d/999_start_s_logger.py ]] &&
        {
            local USER_ID=""

            if [[ -f /etc/machine-id ]]; then
                USER_ID=$(cat /etc/machine-id)
            else
                local USER_SHA=( $(echo $HOME | sha1sum) )
                USER_ID=${USER_SHA[0]}
            fi

            sed -i "s/__USERID__/$USER_ID/g" \
                $PREFIX/extra.env.d/999_start_s_logger.py
        }

    true
}

# =============================================== create-desktop-icon
function create-desktop-icon()
{
    local PREFIX=$1
    local SALOMEVERSION=$2

    local APPLIDIR_PATH=$HOME/.local/share/applications
    local DESKTOP_FILE_NAME=salome_template.desktop
    local DESKTOP_FILE_VERSION=salome_V$SALOMEVERSION.desktop
    local DESKTOPDIR=$(xdg-user-dir DESKTOP)
    local ICONE_FILE=$PREFIX/icon.png

    mv $PREFIX/$DESKTOP_FILE_NAME $PREFIX/$DESKTOP_FILE_VERSION

    [[ $? == 1 ]] && die "cannot create file $PREFIX/$DESKTOP_FILE_VERSION"

    # Install the menu and desktop files if requested

    sed -i "s#APPLIDIR#$PREFIX#g" $PREFIX/$DESKTOP_FILE_VERSION
    sed -i "s#VERSION#$SALOMEVERSION#g" $PREFIX/$DESKTOP_FILE_VERSION

    if [[ ! -d $APPLIDIR_PATH ]]; then
        mkdir -p $APPLIDIR_PATH  || die "mkdir failed"
    fi

    cp $PREFIX/$DESKTOP_FILE_VERSION $APPLIDIR_PATH/
    chmod +x $APPLIDIR_PATH/$DESKTOP_FILE_VERSION

    if [[ -n $DESKTOPDIR ]]; then
        cp $PREFIX/$DESKTOP_FILE_VERSION $DESKTOPDIR
        chmod +x $DESKTOPDIR/$DESKTOP_FILE_VERSION
    fi
}

# =============================================== get-pck-status
function get-pck-status()
{
    local PCK="$1"
    # Get the Installed & Candidate line, returns only the version for both
    # Also kills all suffix +* and .scibian*
    # (pleiade issue : https://forge.pleiade.edf.fr/issues/22794)
    LANG=en_EN.UTF-8 apt-cache policy $PCK |
        grep -E "(Installed|Candidate)" | sed "s/: /|/" |
        cut -d'|' -f2
    apt-cache madison $PCK | cut -d'|' -f2
}

# =============================================== get-pck-status
function check-for-python3()
{
    local BINDIR=$(get-modules-dir $PWD)

    #  If EDF, this is a full EDF build as we try first BINARIES-*
    if [[ $BINDIR == "EDF" ]]; then
        local SBINDIR=EDF/s-salome-kernel
    else
        local SBINDIR=$BINDIR/SALOME
    fi

    #
    # DISTRIBUTION_ID & OS_VERSION defined below
    #

    if [[ $DISTRIBUTION_ID -eq "Debian" && $OS_VERSION -eq "9" ]]; then
        echo Python is embedded into salome on debian9

    elif [[ "$(lsb_release -d)" =~ "Red Hat" ]]; then
        echo Python is embedded into salome on Red Hat

    else
        if [ -z "$(python --version 2>&1 | grep ' 3\.')" ]; then
            echo Python2 is default, checking for python3

            if [ -f /usr/bin/python3 ]; then
                echo Found Python3 in /usr/bin/python3, setup links
                ln -s /usr/bin/python3 $SBINDIR/bin/salome/python
            else
                echo Cannot found a Python3 installation.
                echo SALOME will not work properly.
            fi
        fi
    fi
}

# =============================================== Set OS_VERSION & DISTRIBUTION

TMPV=$(lsb_release -r | tr -d '[ \t]')
TMPV=${TMPV#*:}
OS_VERSION=${TMPV%.*}

TMPV=$(lsb_release -i | tr -d '[ \t]')
DISTRIBUTION_ID=${TMPV#*:}

unset TMPV
