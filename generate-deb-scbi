#! /bin/bash

function usage()
{
    echo
    echo "$0 [options] [run|dev] <version>"

    echo ""
    echo "   run     : to generate the runtime package"
    echo "   dev     : to generate the development package"
    echo "   version : version number for the package"

    echo ""
    echo "   -h | --help            this help message"
    echo "   -e | --env=<name>      environment file ~/.scbi-<name>"
    echo "      | --plan=<name>     a build plan for modules"
    echo "   -p | --plugins=<dir>   specify the modules/plugins directory"
    echo ""
}

set -- $(getopt -q -u -o hep -l help,env:,plan:,plugins: -- $*)

SCBI_OPTIONS=""
KIND=
VERSION=

while [ $# -gt 0 ]; do
    case $1 in
        -h|--help)
            break
            ;;
        -e|--env)
            SCBI_OPTIONS="$SCBI_OPTIONS --env=$2"
            shift
            ;;
        --plan)
            SCBI_OPTIONS="$SCBI_OPTIONS --plan=$2"
            shift
            ;;
        --plugins)
            SCBI_OPTIONS="$SCBI_OPTIONS --plugins=$2"
            shift
            ;;
        (--)
            ;;
        (*)
            if [ -z $KIND ]; then
                KIND=$1
            elif [ -z $VERSION ]; then
                VERSION=$1
            else
                usage
                exit 1
            fi
            ;;
        (-*)
            echo "$0: error - unrecognized option $1" 1>&2; exit 1
            ;;
    esac
    shift
done

# Check that needed Debian tools are installed

if [ -z "$(which dch)" ]; then
    echo dch tool required, please install devscripts package
    exit 1
fi

USER="Pascal Obry"
MAIL="pascal.obry@edf.fr"
HOMEPAGE="https://salome.der.edf.fr"

# This helper script generates the salome-scbi and salome-scbi-dev
# packages.

SUFFIX=""
DESCRIPTION="Paquet contenant les dependances minimales necessaires"

if [ "$KIND" = "dev" ]; then
    SUFFIX="-dev"
    DESCRIPTION="$DESCRIPTION pour la compilation de SALOME."
else
    DESCRIPTION="$DESCRIPTION pour l'execution de SALOME."
fi

DEB="scbi-salome$VERSION${SUFFIX}"
DIR=$DEB
TAR="scbi-salome$VERSION_$VERSION.orig.tar.gz"

# Create the auto-dependencies for control
#
# The first step is to automatically get the dependencies from the
# SCBI module.
#
# We remove the packages having "wayloand" in the name as it is causes
# conflicts with some other packages. We probably want to improve this
# part.

AUTODEPS=""

# echo scbi $SCBI_OPTIONS --list-externals --list-filter=$KIND --deps salome

#for D in $(scbi $SCBI_OPTIONS --list-externals --list-filter=$KIND \
#                --deps salome | grep -v wayland);
#do
#    AUTODEPS="$AUTODEPS, $D"
#done

# Enter working directory

[ -d "$DIR" ]; rm -fr $DIR

mkdir $DIR
cd $DIR

# Create debian dir

mkdir debian

# Create copyright

echo "License: BSD" > debian/copyright

# Create compat

echo -n "9" > debian/compat

# Create rules

TAB="$(printf '\t')"

cat <<EOF > debian/rules
#! /usr/bin/make -f

%%:
${TAB}dh \$@

clean:
EOF

# We create the control with the automatic dependencies above and adding
# some that are required and not part of the dependency tree like
# netcat in net-tools which is executed at runtime and some fonts needed
# for proper rendering of the GUI.

cat <<EOF > debian/control
Source: $DIR
Section: alien
Homepage: $HOMEPAGE
Maintainer: $USER <$MAIL>
Priority: optional
Build-Depends: debhelper
Standards-Version: 3.9.6
XC-Restricted: no
XC-Make-Wrappers: no

Package: $DIR
Architecture: any
Depends: \${shlibs:Depends}, \${misc:Depends}, libreadline6-dev, xfonts-scalable, xfonts-75dpi, net-tools${AUTODEPS}
Description: ${DESCRIPTION}
EOF

# Generate the package

export DEBFULLNAME=$USER
export DEBEMAL=$MAIL

CHANGELOG="Version $VERSION. Version used for SALOME-$VERSION"

RELEASE=$(lsb_release -a 2> /dev/null | grep Codename | cut -d':' -f2)
echo Building package for $RELEASE

dch --package $DIR -v $VERSION --create $CHANGELOG -D $RELEASE \
    --force-distribution

# Create format

mkdir -p debian/source
echo -n "3.0 (quilt)" > debian/source/format

# Finaly create the tarball

cd ..

tar cf $TAR $DIR
